// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DALEC
// DateTime: 2017-01-07 10:18:31
// UserName: karl
// Input file <Asap2.Language.grammar.y - 2017-01-07 10:18:21>

// options: conflicts no-lines gplex conflicts listing

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Asap2
{
internal enum Token {error=2,EOF=3,NUMBER=4,QUOTED_STRING=5,IF_DATA=6,
    IDENTIFIER=7,A2ML=8,A2ML_VERSION=9,ASAP2_VERSION=10,ALIGNMENT=11,ADDR_EPK=12,
    ANNOTATION=13,ANNOTATION_LABEL=14,ANNOTATION_ORIGIN=15,ANNOTATION_TEXT=16,ARRAY_SIZE=17,AXIS_DESCR=18,
    AXIS_PTS=19,AXIS_PTS_REF=20,AXIS_PTS_XYZ45=21,AXIS_RESCALE_XYZ45=22,DIST_OP_XYZ45=23,FIX_NO_AXIS_PTS_XYZ45=24,
    NO_AXIS_PTS_XYZ45=25,NO_RESCALE_XYZ45=26,OFFSET_XYZ45=27,RIP_ADDR_WXYZ45=28,SHIFT_OP_XYZ45=29,SRC_ADDR_XYZ45=30,
    RESERVED=31,STATIC_RECORD_LAYOUT=32,BIT_MASK=33,BIT_OPERATION=34,COMPARISON_QUANTITY=35,CALIBRATION_ACCESS=36,
    CALIBRATION_METHOD=37,CALIBRATION_HANDLE=38,CALIBRATION_HANDLE_TEXT=39,COMPU_TAB=40,COMPU_VTAB=41,COMPU_VTAB_RANGE=42,
    COMPU_METHOD=43,COMPU_TAB_REF=44,COEFFS=45,COEFFS_LINEAR=46,CPU_TYPE=47,CURVE_AXIS_REF=48,
    CUSTOMER=49,CUSTOMER_NO=50,DEFAULT_VALUE=51,DEFAULT_VALUE_NUMERIC=52,DEPOSIT=53,DISPLAY_IDENTIFIER=54,
    DISCRETE=55,ECU=56,ECU_CALIBRATION_OFFSET=57,EPK=58,ERROR_MASK=59,EXTENDED_LIMITS=60,
    FORMULA=61,FORMULA_INV=62,FRAME=63,FRAME_MEASUREMENT=64,FUNCTION=65,FUNCTION_VERSION=66,
    SUB_FUNCTION=67,IN_MEASUREMENT=68,LOC_MEASUREMENT=69,OUT_MEASUREMENT=70,DEF_CHARACTERISTIC=71,FIX_AXIS_PAR=72,
    FIX_AXIS_PAR_DIST=73,FIX_AXIS_PAR_LIST=74,FNC_VALUES=75,REF_UNIT=76,UNIT_CONVERSION=77,SI_EXPONENTS=78,
    IDENTIFICATION=79,RIGHT_SHIFT=80,LEFT_SHIFT=81,SIGN_EXTEND=82,MATRIX_DIM=83,PROJECT=84,
    GUARD_RAILS=85,HEADER=86,MAX_GRAD=87,MODULE=88,MOD_COMMON=89,MOD_PAR=90,
    MEMORY_SEGMENT=91,MEMORY_LAYOUT=92,NUMBER_token=93,NO_OF_INTERFACES=94,BYTE_ORDER=95,DEPENDENT_CHARACTERISTIC=96,
    DATA_SIZE=97,S_REC_LAYOUT=98,VERSION=99,PROJECT_NO=100,PHONE_NO=101,SUPPLIER=102,
    SYSTEM_CONSTANT=103,STATUS_STRING_REF=104,STEP_SIZE=105,MAP_LIST=106,MEASUREMENT=107,MONOTONY=108,
    CHARACTERISTIC=109,ECU_ADDRESS=110,ECU_ADDRESS_EXTENSION=111,FORMAT=112,LAYOUT=113,MAX_REFRESH=114,
    READ_ONLY=115,READ_WRITE=116,PHYS_UNIT=117,FUNCTION_LIST=118,USER=119,REF_MEMORY_SEGMENT=120,
    SYMBOL_LINK=121,VIRTUAL=122,GROUP=123,SUB_GROUP=124,REF_CHARACTERISTIC=125,REF_MEASUREMENT=126,
    RECORD_LAYOUT=127,ROOT=128,VIRTUAL_CHARACTERISTIC=129,UNIT=130,USER_RIGHTS=131,REF_GROUP=132,
    VAR_ADDRESS=133,VAR_CHARACTERISTIC=134,VAR_CRITERION=135,VAR_MEASUREMENT=136,VAR_SELECTION_CHARACTERISTIC=137,VARIANT_CODING=138,
    VAR_FORBIDDEN_COMB=139,VAR_SEPERATOR=140,VAR_NAMING=141,BEGIN=142,END=143,maxParseToken=144,
    COMMENT=145};

internal partial struct ValueType
{ 
            public decimal d;
            public String s;
            public StringBuilder sb;
            public ALIGNMENT.ALIGNMENT_type alignment_token;
            public ALIGNMENT alignment;
            public DEPOSIT deposit;
            public BYTE_ORDER byte_order;
            public MOD_COMMON mod_common;
            public MODULE module;
            public PROJECT project;
            public HEADER header;
            public MEASUREMENT measurement;
            public ECU_ADDRESS ecu_address;
            public ECU_ADDRESS_EXTENSION ecu_address_ext;
            public IF_DATA if_data;
            public A2ML a2ml;
            public ANNOTATION annotation;
            public ANNOTATION_TEXT annotation_text;
            public ADDR_EPK addr_epk;
            public ARRAY_SIZE array_size;
            public BIT_OPERATION bit_operation;
            public CALIBRATION_ACCESS calibration_access;
            public COMPU_TAB compu_tab;
            public COMPU_VTAB compu_vtab;
            public COMPU_VTAB_RANGE compu_vtab_range;
            public MATRIX_DIM matrix_dim;
            public MEMORY_SEGMENT memory_segment;
            public MEMORY_LAYOUT memory_layout;
            public MOD_PAR mod_par;
            public CALIBRATION_METHOD calibration_method;
            public CALIBRATION_HANDLE calibration_handle;
            public FUNCTION_LIST function_list;
            public MAX_REFRESH max_refresh;
            public SYMBOL_LINK symbol_link;
            public VIRTUAL Virtual;
            public GROUP group;
            public SUB_GROUP sub_group;
            public REF_CHARACTERISTIC ref_characteristic;
            public REF_MEASUREMENT ref_measurement;
            public COMPU_METHOD compu_method;
            public FORMULA formula;
            public CHARACTERISTIC characteristic;
            public List<string> IDENTIFIER_list;
            public AXIS_DESCR axis_descr;
            public FIX_AXIS_PAR_LIST fix_axis_par_list;
            public MONOTONY monotony;
            public AXIS_PTS axis_pts;
            public RECORD_LAYOUT record_layout;
            public FUNCTION function;
            public UNIT unit;
            public USER_RIGHTS user_rights;
            public FRAME frame;
            public VARIANT_CODING variant_coding;
            public VAR_FORBIDDEN_COMB var_forbidden_comb;
            public VAR_CRITERION var_criterion;
            public VAR_CHARACTERISTIC var_characteristic;
            public VAR_ADDRESS var_address;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,Location> {
  private Location __yylloc = new Location();
  public override Location yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public Location yylloc;
  public ScanObj( int t, ValueType val, Location loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Asap2Parser: ShiftReduceParser<ValueType, Location>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[296];
  private static State[] states = new State[665];
  private static string[] nonTerms = new string[] {
      "Asap2File", "deposit", "byte_order", "a2ml", "addr_epk", "alignment", 
      "annotation", "annotation_data", "annotation_text", "annotation_text_data", 
      "array_size", "axis_descr", "axis_pts", "axis_pts_data", "bit_operation", 
      "bit_operation_data", "characteristic", "characteristic_data", "calibration_access", 
      "calibration_method", "calibration_method_data", "calibration_handle", 
      "calibration_handle_data", "compu_method", "compu_method_data", "compu_tab", 
      "compu_tab_data", "compu_vtab", "compu_vtab_data", "compu_vtab_range", 
      "compu_vtab_range_data", "matrix_dim", "ecu_address", "ecu_address_extension", 
      "fix_axis_par_list", "frame", "frame_data", "function", "function_data", 
      "function_list", "function_list_data", "formula", "mod_common", "mod_common_data", 
      "mod_par", "mod_par_data", "module", "module_data", "monotony", "memory_segment", 
      "memory_segment_data", "memory_layout", "memory_layout_data", "project", 
      "project_data", "header", "header_data", "measurement", "measurement_data", 
      "max_refresh", "symbol_link", "if_data", "var_address", "var_characteristic", 
      "var_criterion", "variant_coding", "variant_coding_data", "var_forbidden_comb", 
      "Virtual", "Virtual_data", "group", "group_data", "sub_group", "sub_group_data", 
      "ref_characteristic", "ref_characteristic_data", "ref_measurement", "ref_measurement_data", 
      "record_layout", "record_layout_data", "unit", "unit_data", "user_rights", 
      "user_rights_data", "default_value", "default_value_numeric", "IDENTIFIER_list", 
      "$accept", };

  static Asap2Parser() {
    states[0] = new State(-2,new int[]{-1,1});
    states[1] = new State(new int[]{3,2,10,4,9,7,142,10},new int[]{-54,3});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(new int[]{4,5});
    states[5] = new State(new int[]{4,6});
    states[6] = new State(-4);
    states[7] = new State(new int[]{4,8});
    states[8] = new State(new int[]{4,9});
    states[9] = new State(-5);
    states[10] = new State(new int[]{84,11});
    states[11] = new State(new int[]{7,663},new int[]{-55,12});
    states[12] = new State(new int[]{143,13,142,17},new int[]{-56,15,-47,16});
    states[13] = new State(new int[]{84,14});
    states[14] = new State(-122);
    states[15] = new State(-124);
    states[16] = new State(-125);
    states[17] = new State(new int[]{86,18,88,27});
    states[18] = new State(new int[]{5,26},new int[]{-57,19});
    states[19] = new State(new int[]{143,20,99,22,100,24});
    states[20] = new State(new int[]{86,21});
    states[21] = new State(-126);
    states[22] = new State(new int[]{5,23});
    states[23] = new State(-128);
    states[24] = new State(new int[]{7,25});
    states[25] = new State(-129);
    states[26] = new State(-127);
    states[27] = new State(new int[]{7,661},new int[]{-48,28});
    states[28] = new State(new int[]{143,29,142,49},new int[]{-43,31,-58,32,-62,33,-4,34,-24,35,-26,36,-28,37,-30,38,-71,39,-45,40,-17,41,-13,42,-79,43,-38,44,-81,45,-83,46,-36,47,-66,48});
    states[29] = new State(new int[]{88,30});
    states[30] = new State(-130);
    states[31] = new State(-132);
    states[32] = new State(-133);
    states[33] = new State(-134);
    states[34] = new State(-135);
    states[35] = new State(-136);
    states[36] = new State(-137);
    states[37] = new State(-138);
    states[38] = new State(-139);
    states[39] = new State(-140);
    states[40] = new State(-141);
    states[41] = new State(-142);
    states[42] = new State(-143);
    states[43] = new State(-144);
    states[44] = new State(-145);
    states[45] = new State(-146);
    states[46] = new State(-147);
    states[47] = new State(-148);
    states[48] = new State(-149);
    states[49] = new State(new int[]{89,50,107,68,6,135,8,160,43,161,40,196,41,212,42,223,123,234,90,263,109,347,19,455,127,496,65,548,130,580,131,601,63,612,138,623});
    states[50] = new State(new int[]{5,67},new int[]{-44,51});
    states[51] = new State(new int[]{143,52,97,56,98,58,53,61,95,63,11,65},new int[]{-2,54,-3,55,-6,60});
    states[52] = new State(new int[]{89,53});
    states[53] = new State(-151);
    states[54] = new State(-153);
    states[55] = new State(-154);
    states[56] = new State(new int[]{4,57});
    states[57] = new State(-155);
    states[58] = new State(new int[]{7,59});
    states[59] = new State(-156);
    states[60] = new State(-157);
    states[61] = new State(new int[]{7,62});
    states[62] = new State(-226);
    states[63] = new State(new int[]{7,64});
    states[64] = new State(-227);
    states[65] = new State(new int[]{4,66});
    states[66] = new State(-10);
    states[67] = new State(-152);
    states[68] = new State(new int[]{7,152},new int[]{-59,69});
    states[69] = new State(new int[]{143,70,33,74,55,78,54,79,59,83,112,85,113,88,117,92,116,94,120,95,142,100,17,136,95,63,110,138,111,140,83,142,114,146,121,149},new int[]{-7,72,-11,73,-15,76,-3,77,-33,81,-34,82,-40,87,-32,90,-60,91,-61,97,-69,98,-62,99});
    states[70] = new State(new int[]{107,71});
    states[71] = new State(-177);
    states[72] = new State(-179);
    states[73] = new State(-180);
    states[74] = new State(new int[]{4,75});
    states[75] = new State(-181);
    states[76] = new State(-182);
    states[77] = new State(-183);
    states[78] = new State(-184);
    states[79] = new State(new int[]{7,80});
    states[80] = new State(-185);
    states[81] = new State(-186);
    states[82] = new State(-187);
    states[83] = new State(new int[]{4,84});
    states[84] = new State(-188);
    states[85] = new State(new int[]{5,86});
    states[86] = new State(-189);
    states[87] = new State(-190);
    states[88] = new State(new int[]{7,89});
    states[89] = new State(-191);
    states[90] = new State(-192);
    states[91] = new State(-193);
    states[92] = new State(new int[]{5,93});
    states[93] = new State(-194);
    states[94] = new State(-195);
    states[95] = new State(new int[]{7,96});
    states[96] = new State(-196);
    states[97] = new State(-197);
    states[98] = new State(-198);
    states[99] = new State(-199);
    states[100] = new State(new int[]{13,101,34,116,118,125,122,130,6,135});
    states[101] = new State(-12,new int[]{-8,102});
    states[102] = new State(new int[]{143,103,14,105,15,107,142,110},new int[]{-9,109});
    states[103] = new State(new int[]{13,104});
    states[104] = new State(-11);
    states[105] = new State(new int[]{5,106});
    states[106] = new State(-13);
    states[107] = new State(new int[]{5,108});
    states[108] = new State(-14);
    states[109] = new State(-15);
    states[110] = new State(new int[]{16,111});
    states[111] = new State(-17,new int[]{-10,112});
    states[112] = new State(new int[]{143,113,5,115});
    states[113] = new State(new int[]{16,114});
    states[114] = new State(-16);
    states[115] = new State(-18);
    states[116] = new State(-58,new int[]{-16,117});
    states[117] = new State(new int[]{143,118,80,120,81,122,82,124});
    states[118] = new State(new int[]{34,119});
    states[119] = new State(-57);
    states[120] = new State(new int[]{4,121});
    states[121] = new State(-59);
    states[122] = new State(new int[]{4,123});
    states[123] = new State(-60);
    states[124] = new State(-61);
    states[125] = new State(-215,new int[]{-41,126});
    states[126] = new State(new int[]{143,127,7,129});
    states[127] = new State(new int[]{118,128});
    states[128] = new State(-214);
    states[129] = new State(-216);
    states[130] = new State(-218,new int[]{-70,131});
    states[131] = new State(new int[]{143,132,7,134});
    states[132] = new State(new int[]{122,133});
    states[133] = new State(-217);
    states[134] = new State(-219);
    states[135] = new State(-150);
    states[136] = new State(new int[]{4,137});
    states[137] = new State(-19);
    states[138] = new State(new int[]{4,139});
    states[139] = new State(-228);
    states[140] = new State(new int[]{4,141});
    states[141] = new State(-229);
    states[142] = new State(new int[]{4,143});
    states[143] = new State(new int[]{4,144});
    states[144] = new State(new int[]{4,145});
    states[145] = new State(-176);
    states[146] = new State(new int[]{4,147});
    states[147] = new State(new int[]{4,148});
    states[148] = new State(-200);
    states[149] = new State(new int[]{5,150});
    states[150] = new State(new int[]{4,151});
    states[151] = new State(-202);
    states[152] = new State(new int[]{5,153});
    states[153] = new State(new int[]{7,154});
    states[154] = new State(new int[]{7,155});
    states[155] = new State(new int[]{4,156});
    states[156] = new State(new int[]{4,157});
    states[157] = new State(new int[]{4,158});
    states[158] = new State(new int[]{4,159});
    states[159] = new State(-178);
    states[160] = new State(-8);
    states[161] = new State(new int[]{7,191},new int[]{-25,162});
    states[162] = new State(new int[]{143,163,45,165,46,172,44,175,76,178,104,180,142,182},new int[]{-42,177});
    states[163] = new State(new int[]{43,164});
    states[164] = new State(-70);
    states[165] = new State(new int[]{4,166});
    states[166] = new State(new int[]{4,167});
    states[167] = new State(new int[]{4,168});
    states[168] = new State(new int[]{4,169});
    states[169] = new State(new int[]{4,170});
    states[170] = new State(new int[]{4,171});
    states[171] = new State(-72);
    states[172] = new State(new int[]{4,173});
    states[173] = new State(new int[]{4,174});
    states[174] = new State(-73);
    states[175] = new State(new int[]{7,176});
    states[176] = new State(-74);
    states[177] = new State(-75);
    states[178] = new State(new int[]{7,179});
    states[179] = new State(-76);
    states[180] = new State(new int[]{7,181});
    states[181] = new State(-77);
    states[182] = new State(new int[]{61,183});
    states[183] = new State(new int[]{5,184});
    states[184] = new State(new int[]{143,185,62,187});
    states[185] = new State(new int[]{61,186});
    states[186] = new State(-78);
    states[187] = new State(new int[]{5,188});
    states[188] = new State(new int[]{143,189});
    states[189] = new State(new int[]{61,190});
    states[190] = new State(-79);
    states[191] = new State(new int[]{5,192});
    states[192] = new State(new int[]{7,193});
    states[193] = new State(new int[]{5,194});
    states[194] = new State(new int[]{5,195});
    states[195] = new State(-71);
    states[196] = new State(new int[]{7,208},new int[]{-27,197});
    states[197] = new State(new int[]{143,198,4,200,51,204,52,206},new int[]{-85,202,-86,203});
    states[198] = new State(new int[]{40,199});
    states[199] = new State(-107);
    states[200] = new State(new int[]{4,201});
    states[201] = new State(-109);
    states[202] = new State(-110);
    states[203] = new State(-111);
    states[204] = new State(new int[]{5,205});
    states[205] = new State(-120);
    states[206] = new State(new int[]{4,207});
    states[207] = new State(-121);
    states[208] = new State(new int[]{5,209});
    states[209] = new State(new int[]{7,210});
    states[210] = new State(new int[]{4,211});
    states[211] = new State(-108);
    states[212] = new State(new int[]{7,219},new int[]{-29,213});
    states[213] = new State(new int[]{143,214,4,216,51,204},new int[]{-85,218});
    states[214] = new State(new int[]{41,215});
    states[215] = new State(-112);
    states[216] = new State(new int[]{5,217});
    states[217] = new State(-114);
    states[218] = new State(-115);
    states[219] = new State(new int[]{5,220});
    states[220] = new State(new int[]{7,221});
    states[221] = new State(new int[]{4,222});
    states[222] = new State(-113);
    states[223] = new State(new int[]{7,231},new int[]{-31,224});
    states[224] = new State(new int[]{143,225,4,227,51,204},new int[]{-85,230});
    states[225] = new State(new int[]{42,226});
    states[226] = new State(-116);
    states[227] = new State(new int[]{4,228});
    states[228] = new State(new int[]{5,229});
    states[229] = new State(-118);
    states[230] = new State(-119);
    states[231] = new State(new int[]{5,232});
    states[232] = new State(new int[]{4,233});
    states[233] = new State(-117);
    states[234] = new State(new int[]{7,261},new int[]{-72,235});
    states[235] = new State(new int[]{143,236,128,243,142,245},new int[]{-7,238,-62,239,-40,240,-75,241,-77,242,-73,244});
    states[236] = new State(new int[]{123,237});
    states[237] = new State(-230);
    states[238] = new State(-232);
    states[239] = new State(-233);
    states[240] = new State(-234);
    states[241] = new State(-235);
    states[242] = new State(-236);
    states[243] = new State(-237);
    states[244] = new State(-238);
    states[245] = new State(new int[]{13,101,6,135,118,125,125,246,126,251,124,256});
    states[246] = new State(-240,new int[]{-76,247});
    states[247] = new State(new int[]{143,248,7,250});
    states[248] = new State(new int[]{125,249});
    states[249] = new State(-239);
    states[250] = new State(-241);
    states[251] = new State(-243,new int[]{-78,252});
    states[252] = new State(new int[]{143,253,7,255});
    states[253] = new State(new int[]{126,254});
    states[254] = new State(-242);
    states[255] = new State(-244);
    states[256] = new State(-263,new int[]{-74,257});
    states[257] = new State(new int[]{143,258,7,260});
    states[258] = new State(new int[]{124,259});
    states[259] = new State(-262);
    states[260] = new State(-264);
    states[261] = new State(new int[]{5,262});
    states[262] = new State(-231);
    states[263] = new State(new int[]{5,346},new int[]{-46,264});
    states[264] = new State(new int[]{143,265,47,269,49,271,50,273,56,275,57,277,58,279,94,283,101,285,102,287,103,289,119,292,99,294,12,296,142,298},new int[]{-5,267,-20,268,-52,281,-50,282});
    states[265] = new State(new int[]{90,266});
    states[266] = new State(-158);
    states[267] = new State(-160);
    states[268] = new State(-161);
    states[269] = new State(new int[]{5,270});
    states[270] = new State(-162);
    states[271] = new State(new int[]{5,272});
    states[272] = new State(-163);
    states[273] = new State(new int[]{5,274});
    states[274] = new State(-164);
    states[275] = new State(new int[]{5,276});
    states[276] = new State(-165);
    states[277] = new State(new int[]{4,278});
    states[278] = new State(-166);
    states[279] = new State(new int[]{5,280});
    states[280] = new State(-167);
    states[281] = new State(-168);
    states[282] = new State(-169);
    states[283] = new State(new int[]{4,284});
    states[284] = new State(-170);
    states[285] = new State(new int[]{5,286});
    states[286] = new State(-171);
    states[287] = new State(new int[]{5,288});
    states[288] = new State(-172);
    states[289] = new State(new int[]{5,290});
    states[290] = new State(new int[]{5,291});
    states[291] = new State(-173);
    states[292] = new State(new int[]{5,293});
    states[293] = new State(-174);
    states[294] = new State(new int[]{5,295});
    states[295] = new State(-175);
    states[296] = new State(new int[]{4,297});
    states[297] = new State(-9);
    states[298] = new State(new int[]{37,299,92,315,91,329});
    states[299] = new State(new int[]{5,313},new int[]{-21,300});
    states[300] = new State(new int[]{143,301,142,304},new int[]{-22,303});
    states[301] = new State(new int[]{37,302});
    states[302] = new State(-63);
    states[303] = new State(-65);
    states[304] = new State(new int[]{38,305});
    states[305] = new State(new int[]{4,312},new int[]{-23,306});
    states[306] = new State(new int[]{143,307,4,309,39,310});
    states[307] = new State(new int[]{38,308});
    states[308] = new State(-66);
    states[309] = new State(-68);
    states[310] = new State(new int[]{5,311});
    states[311] = new State(-69);
    states[312] = new State(-67);
    states[313] = new State(new int[]{4,314});
    states[314] = new State(-64);
    states[315] = new State(new int[]{7,321},new int[]{-53,316});
    states[316] = new State(new int[]{143,317,142,320},new int[]{-62,319});
    states[317] = new State(new int[]{92,318});
    states[318] = new State(-223);
    states[319] = new State(-225);
    states[320] = new State(new int[]{6,135});
    states[321] = new State(new int[]{4,322});
    states[322] = new State(new int[]{4,323});
    states[323] = new State(new int[]{4,324});
    states[324] = new State(new int[]{4,325});
    states[325] = new State(new int[]{4,326});
    states[326] = new State(new int[]{4,327});
    states[327] = new State(new int[]{4,328});
    states[328] = new State(-224);
    states[329] = new State(new int[]{7,334},new int[]{-51,330});
    states[330] = new State(new int[]{143,331,142,320},new int[]{-62,333});
    states[331] = new State(new int[]{91,332});
    states[332] = new State(-220);
    states[333] = new State(-222);
    states[334] = new State(new int[]{5,335});
    states[335] = new State(new int[]{7,336});
    states[336] = new State(new int[]{7,337});
    states[337] = new State(new int[]{7,338});
    states[338] = new State(new int[]{4,339});
    states[339] = new State(new int[]{4,340});
    states[340] = new State(new int[]{4,341});
    states[341] = new State(new int[]{4,342});
    states[342] = new State(new int[]{4,343});
    states[343] = new State(new int[]{4,344});
    states[344] = new State(new int[]{4,345});
    states[345] = new State(-221);
    states[346] = new State(-159);
    states[347] = new State(new int[]{7,446},new int[]{-18,348});
    states[348] = new State(new int[]{143,349,142,352,33,414,35,417,55,420,54,421,112,424,60,426,85,430,93,434,117,436,115,438,120,439,105,441,95,63,36,444,111,140,83,142,114,146,121,149},new int[]{-7,351,-3,416,-19,419,-34,423,-40,429,-62,431,-32,432,-60,433,-61,443});
    states[349] = new State(new int[]{109,350});
    states[350] = new State(-80);
    states[351] = new State(-82);
    states[352] = new State(new int[]{18,353,96,399,106,405,129,409,13,101,118,125,6,135});
    states[353] = new State(new int[]{7,393},new int[]{-12,354});
    states[354] = new State(new int[]{143,355,20,358,48,361,60,364,72,367,73,371,142,375,112,381,87,383,117,386,115,388,105,389,95,63,53,61,108,391},new int[]{-7,357,-3,360,-2,363,-49,385});
    states[355] = new State(new int[]{18,356});
    states[356] = new State(-83);
    states[357] = new State(-21);
    states[358] = new State(new int[]{7,359});
    states[359] = new State(-22);
    states[360] = new State(-23);
    states[361] = new State(new int[]{7,362});
    states[362] = new State(-24);
    states[363] = new State(-25);
    states[364] = new State(new int[]{4,365});
    states[365] = new State(new int[]{4,366});
    states[366] = new State(-26);
    states[367] = new State(new int[]{4,368});
    states[368] = new State(new int[]{4,369});
    states[369] = new State(new int[]{4,370});
    states[370] = new State(-27);
    states[371] = new State(new int[]{4,372});
    states[372] = new State(new int[]{4,373});
    states[373] = new State(new int[]{4,374});
    states[374] = new State(-28);
    states[375] = new State(new int[]{74,376,13,101});
    states[376] = new State(-55,new int[]{-35,377});
    states[377] = new State(new int[]{143,378,4,380});
    states[378] = new State(new int[]{74,379});
    states[379] = new State(-29);
    states[380] = new State(-56);
    states[381] = new State(new int[]{5,382});
    states[382] = new State(-30);
    states[383] = new State(new int[]{4,384});
    states[384] = new State(-31);
    states[385] = new State(-32);
    states[386] = new State(new int[]{5,387});
    states[387] = new State(-33);
    states[388] = new State(-34);
    states[389] = new State(new int[]{4,390});
    states[390] = new State(-35);
    states[391] = new State(new int[]{7,392});
    states[392] = new State(-201);
    states[393] = new State(new int[]{7,394});
    states[394] = new State(new int[]{7,395});
    states[395] = new State(new int[]{4,396});
    states[396] = new State(new int[]{4,397});
    states[397] = new State(new int[]{4,398});
    states[398] = new State(-20);
    states[399] = new State(new int[]{5,400});
    states[400] = new State(-6,new int[]{-87,401});
    states[401] = new State(new int[]{143,402,7,404});
    states[402] = new State(new int[]{96,403});
    states[403] = new State(-88);
    states[404] = new State(-7);
    states[405] = new State(-6,new int[]{-87,406});
    states[406] = new State(new int[]{143,407,7,404});
    states[407] = new State(new int[]{106,408});
    states[408] = new State(-97);
    states[409] = new State(new int[]{5,410});
    states[410] = new State(-6,new int[]{-87,411});
    states[411] = new State(new int[]{143,412,7,404});
    states[412] = new State(new int[]{129,413});
    states[413] = new State(-106);
    states[414] = new State(new int[]{4,415});
    states[415] = new State(-84);
    states[416] = new State(-85);
    states[417] = new State(new int[]{7,418});
    states[418] = new State(-86);
    states[419] = new State(-87);
    states[420] = new State(-89);
    states[421] = new State(new int[]{7,422});
    states[422] = new State(-90);
    states[423] = new State(-91);
    states[424] = new State(new int[]{5,425});
    states[425] = new State(-92);
    states[426] = new State(new int[]{4,427});
    states[427] = new State(new int[]{4,428});
    states[428] = new State(-93);
    states[429] = new State(-94);
    states[430] = new State(-95);
    states[431] = new State(-96);
    states[432] = new State(-98);
    states[433] = new State(-99);
    states[434] = new State(new int[]{4,435});
    states[435] = new State(-100);
    states[436] = new State(new int[]{5,437});
    states[437] = new State(-101);
    states[438] = new State(-102);
    states[439] = new State(new int[]{7,440});
    states[440] = new State(-103);
    states[441] = new State(new int[]{4,442});
    states[442] = new State(-104);
    states[443] = new State(-105);
    states[444] = new State(new int[]{7,445});
    states[445] = new State(-62);
    states[446] = new State(new int[]{5,447});
    states[447] = new State(new int[]{7,448});
    states[448] = new State(new int[]{4,449});
    states[449] = new State(new int[]{7,450});
    states[450] = new State(new int[]{4,451});
    states[451] = new State(new int[]{7,452});
    states[452] = new State(new int[]{4,453});
    states[453] = new State(new int[]{4,454});
    states[454] = new State(-81);
    states[455] = new State(new int[]{7,483,142,495},new int[]{-14,456,-13,493});
    states[456] = new State(new int[]{143,457,54,463,60,466,112,469,85,472,117,474,115,476,120,477,105,479,142,482,95,63,36,444,53,61,111,140,108,391,121,149},new int[]{-7,459,-3,460,-19,461,-2,462,-34,465,-40,471,-49,473,-61,481});
    states[457] = new State(new int[]{19,458});
    states[458] = new State(-36);
    states[459] = new State(-38);
    states[460] = new State(-39);
    states[461] = new State(-40);
    states[462] = new State(-41);
    states[463] = new State(new int[]{7,464});
    states[464] = new State(-42);
    states[465] = new State(-43);
    states[466] = new State(new int[]{4,467});
    states[467] = new State(new int[]{4,468});
    states[468] = new State(-44);
    states[469] = new State(new int[]{5,470});
    states[470] = new State(-45);
    states[471] = new State(-46);
    states[472] = new State(-47);
    states[473] = new State(-49);
    states[474] = new State(new int[]{5,475});
    states[475] = new State(-50);
    states[476] = new State(-51);
    states[477] = new State(new int[]{7,478});
    states[478] = new State(-52);
    states[479] = new State(new int[]{4,480});
    states[480] = new State(-53);
    states[481] = new State(-54);
    states[482] = new State(new int[]{13,101,118,125});
    states[483] = new State(new int[]{5,484});
    states[484] = new State(new int[]{4,485});
    states[485] = new State(new int[]{7,486});
    states[486] = new State(new int[]{7,487});
    states[487] = new State(new int[]{4,488});
    states[488] = new State(new int[]{7,489});
    states[489] = new State(new int[]{4,490});
    states[490] = new State(new int[]{4,491});
    states[491] = new State(new int[]{4,492});
    states[492] = new State(-37);
    states[493] = new State(new int[]{142,320},new int[]{-62,494});
    states[494] = new State(-48);
    states[495] = new State(new int[]{19,455});
    states[496] = new State(new int[]{7,547},new int[]{-80,497});
    states[497] = new State(new int[]{143,498,21,501,22,506,23,512,24,515,75,517,79,522,25,525,26,528,27,531,31,534,28,537,29,540,30,543,32,546,11,65},new int[]{-6,500});
    states[498] = new State(new int[]{127,499});
    states[499] = new State(-245);
    states[500] = new State(-247);
    states[501] = new State(new int[]{4,502});
    states[502] = new State(new int[]{7,503});
    states[503] = new State(new int[]{7,504});
    states[504] = new State(new int[]{7,505});
    states[505] = new State(-248);
    states[506] = new State(new int[]{4,507});
    states[507] = new State(new int[]{7,508});
    states[508] = new State(new int[]{4,509});
    states[509] = new State(new int[]{7,510});
    states[510] = new State(new int[]{7,511});
    states[511] = new State(-249);
    states[512] = new State(new int[]{4,513});
    states[513] = new State(new int[]{7,514});
    states[514] = new State(-250);
    states[515] = new State(new int[]{4,516});
    states[516] = new State(-251);
    states[517] = new State(new int[]{4,518});
    states[518] = new State(new int[]{7,519});
    states[519] = new State(new int[]{7,520});
    states[520] = new State(new int[]{7,521});
    states[521] = new State(-252);
    states[522] = new State(new int[]{4,523});
    states[523] = new State(new int[]{7,524});
    states[524] = new State(-253);
    states[525] = new State(new int[]{4,526});
    states[526] = new State(new int[]{7,527});
    states[527] = new State(-254);
    states[528] = new State(new int[]{4,529});
    states[529] = new State(new int[]{7,530});
    states[530] = new State(-255);
    states[531] = new State(new int[]{4,532});
    states[532] = new State(new int[]{7,533});
    states[533] = new State(-256);
    states[534] = new State(new int[]{4,535});
    states[535] = new State(new int[]{7,536});
    states[536] = new State(-257);
    states[537] = new State(new int[]{4,538});
    states[538] = new State(new int[]{7,539});
    states[539] = new State(-258);
    states[540] = new State(new int[]{4,541});
    states[541] = new State(new int[]{7,542});
    states[542] = new State(-259);
    states[543] = new State(new int[]{4,544});
    states[544] = new State(new int[]{7,545});
    states[545] = new State(-260);
    states[546] = new State(-261);
    states[547] = new State(-246);
    states[548] = new State(new int[]{7,578},new int[]{-39,549});
    states[549] = new State(new int[]{143,550,66,553,142,555},new int[]{-7,552,-62,576,-75,577});
    states[550] = new State(new int[]{65,551});
    states[551] = new State(-203);
    states[552] = new State(-205);
    states[553] = new State(new int[]{5,554});
    states[554] = new State(-206);
    states[555] = new State(new int[]{71,556,68,560,69,564,70,568,67,572,13,101,6,135,125,246});
    states[556] = new State(-6,new int[]{-87,557});
    states[557] = new State(new int[]{143,558,7,404});
    states[558] = new State(new int[]{71,559});
    states[559] = new State(-207);
    states[560] = new State(-6,new int[]{-87,561});
    states[561] = new State(new int[]{143,562,7,404});
    states[562] = new State(new int[]{68,563});
    states[563] = new State(-209);
    states[564] = new State(-6,new int[]{-87,565});
    states[565] = new State(new int[]{143,566,7,404});
    states[566] = new State(new int[]{69,567});
    states[567] = new State(-210);
    states[568] = new State(-6,new int[]{-87,569});
    states[569] = new State(new int[]{143,570,7,404});
    states[570] = new State(new int[]{70,571});
    states[571] = new State(-211);
    states[572] = new State(-6,new int[]{-87,573});
    states[573] = new State(new int[]{143,574,7,404});
    states[574] = new State(new int[]{67,575});
    states[575] = new State(-213);
    states[576] = new State(-208);
    states[577] = new State(-212);
    states[578] = new State(new int[]{5,579});
    states[579] = new State(-204);
    states[580] = new State(new int[]{7,597},new int[]{-82,581});
    states[581] = new State(new int[]{143,582,76,584,78,586,77,594});
    states[582] = new State(new int[]{130,583});
    states[583] = new State(-265);
    states[584] = new State(new int[]{7,585});
    states[585] = new State(-267);
    states[586] = new State(new int[]{4,587});
    states[587] = new State(new int[]{4,588});
    states[588] = new State(new int[]{4,589});
    states[589] = new State(new int[]{4,590});
    states[590] = new State(new int[]{4,591});
    states[591] = new State(new int[]{4,592});
    states[592] = new State(new int[]{4,593});
    states[593] = new State(-268);
    states[594] = new State(new int[]{4,595});
    states[595] = new State(new int[]{4,596});
    states[596] = new State(-269);
    states[597] = new State(new int[]{5,598});
    states[598] = new State(new int[]{5,599});
    states[599] = new State(new int[]{7,600});
    states[600] = new State(-266);
    states[601] = new State(new int[]{7,611},new int[]{-84,602});
    states[602] = new State(new int[]{143,603,142,605,115,610});
    states[603] = new State(new int[]{131,604});
    states[604] = new State(-270);
    states[605] = new State(new int[]{132,606});
    states[606] = new State(-6,new int[]{-87,607});
    states[607] = new State(new int[]{143,608,7,404});
    states[608] = new State(new int[]{132,609});
    states[609] = new State(-272);
    states[610] = new State(-273);
    states[611] = new State(-271);
    states[612] = new State(new int[]{7,619},new int[]{-37,613});
    states[613] = new State(new int[]{143,614,64,616,142,320},new int[]{-62,618});
    states[614] = new State(new int[]{63,615});
    states[615] = new State(-274);
    states[616] = new State(-6,new int[]{-87,617});
    states[617] = new State(new int[]{7,404,143,-276,64,-276,142,-276});
    states[618] = new State(-277);
    states[619] = new State(new int[]{5,620});
    states[620] = new State(new int[]{4,621});
    states[621] = new State(new int[]{4,622});
    states[622] = new State(-275);
    states[623] = new State(-279,new int[]{-67,624});
    states[624] = new State(new int[]{143,625,142,627,140,657,141,659});
    states[625] = new State(new int[]{138,626});
    states[626] = new State(-278);
    states[627] = new State(new int[]{134,628,135,640,139,651});
    states[628] = new State(new int[]{7,639},new int[]{-64,629});
    states[629] = new State(new int[]{143,630,7,632,142,633});
    states[630] = new State(new int[]{134,631});
    states[631] = new State(-280);
    states[632] = new State(-292);
    states[633] = new State(new int[]{133,634});
    states[634] = new State(-294,new int[]{-63,635});
    states[635] = new State(new int[]{143,636,4,638});
    states[636] = new State(new int[]{133,637});
    states[637] = new State(-293);
    states[638] = new State(-295);
    states[639] = new State(-291);
    states[640] = new State(new int[]{7,649},new int[]{-65,641});
    states[641] = new State(new int[]{143,642,7,644,136,645,137,647});
    states[642] = new State(new int[]{135,643});
    states[643] = new State(-281);
    states[644] = new State(-288);
    states[645] = new State(new int[]{7,646});
    states[646] = new State(-289);
    states[647] = new State(new int[]{7,648});
    states[648] = new State(-290);
    states[649] = new State(new int[]{5,650});
    states[650] = new State(-287);
    states[651] = new State(-285,new int[]{-68,652});
    states[652] = new State(new int[]{143,653,7,655});
    states[653] = new State(new int[]{139,654});
    states[654] = new State(-282);
    states[655] = new State(new int[]{7,656});
    states[656] = new State(-286);
    states[657] = new State(new int[]{5,658});
    states[658] = new State(-283);
    states[659] = new State(new int[]{7,660});
    states[660] = new State(-284);
    states[661] = new State(new int[]{5,662});
    states[662] = new State(-131);
    states[663] = new State(new int[]{5,664});
    states[664] = new State(-123);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-88, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-1,-54});
    rules[4] = new Rule(-1, new int[]{-1,10,4,4});
    rules[5] = new Rule(-1, new int[]{-1,9,4,4});
    rules[6] = new Rule(-87, new int[]{});
    rules[7] = new Rule(-87, new int[]{-87,7});
    rules[8] = new Rule(-4, new int[]{142,8});
    rules[9] = new Rule(-5, new int[]{12,4});
    rules[10] = new Rule(-6, new int[]{11,4});
    rules[11] = new Rule(-7, new int[]{142,13,-8,143,13});
    rules[12] = new Rule(-8, new int[]{});
    rules[13] = new Rule(-8, new int[]{-8,14,5});
    rules[14] = new Rule(-8, new int[]{-8,15,5});
    rules[15] = new Rule(-8, new int[]{-8,-9});
    rules[16] = new Rule(-9, new int[]{142,16,-10,143,16});
    rules[17] = new Rule(-10, new int[]{});
    rules[18] = new Rule(-10, new int[]{-10,5});
    rules[19] = new Rule(-11, new int[]{17,4});
    rules[20] = new Rule(-12, new int[]{7,7,7,4,4,4});
    rules[21] = new Rule(-12, new int[]{-12,-7});
    rules[22] = new Rule(-12, new int[]{-12,20,7});
    rules[23] = new Rule(-12, new int[]{-12,-3});
    rules[24] = new Rule(-12, new int[]{-12,48,7});
    rules[25] = new Rule(-12, new int[]{-12,-2});
    rules[26] = new Rule(-12, new int[]{-12,60,4,4});
    rules[27] = new Rule(-12, new int[]{-12,72,4,4,4});
    rules[28] = new Rule(-12, new int[]{-12,73,4,4,4});
    rules[29] = new Rule(-12, new int[]{-12,142,74,-35,143,74});
    rules[30] = new Rule(-12, new int[]{-12,112,5});
    rules[31] = new Rule(-12, new int[]{-12,87,4});
    rules[32] = new Rule(-12, new int[]{-12,-49});
    rules[33] = new Rule(-12, new int[]{-12,117,5});
    rules[34] = new Rule(-12, new int[]{-12,115});
    rules[35] = new Rule(-12, new int[]{-12,105,4});
    rules[36] = new Rule(-13, new int[]{142,19,-14,143,19});
    rules[37] = new Rule(-14, new int[]{7,5,4,7,7,4,7,4,4,4});
    rules[38] = new Rule(-14, new int[]{-14,-7});
    rules[39] = new Rule(-14, new int[]{-14,-3});
    rules[40] = new Rule(-14, new int[]{-14,-19});
    rules[41] = new Rule(-14, new int[]{-14,-2});
    rules[42] = new Rule(-14, new int[]{-14,54,7});
    rules[43] = new Rule(-14, new int[]{-14,-34});
    rules[44] = new Rule(-14, new int[]{-14,60,4,4});
    rules[45] = new Rule(-14, new int[]{-14,112,5});
    rules[46] = new Rule(-14, new int[]{-14,-40});
    rules[47] = new Rule(-14, new int[]{-14,85});
    rules[48] = new Rule(-14, new int[]{-13,-62});
    rules[49] = new Rule(-14, new int[]{-14,-49});
    rules[50] = new Rule(-14, new int[]{-14,117,5});
    rules[51] = new Rule(-14, new int[]{-14,115});
    rules[52] = new Rule(-14, new int[]{-14,120,7});
    rules[53] = new Rule(-14, new int[]{-14,105,4});
    rules[54] = new Rule(-14, new int[]{-14,-61});
    rules[55] = new Rule(-35, new int[]{});
    rules[56] = new Rule(-35, new int[]{-35,4});
    rules[57] = new Rule(-15, new int[]{142,34,-16,143,34});
    rules[58] = new Rule(-16, new int[]{});
    rules[59] = new Rule(-16, new int[]{-16,80,4});
    rules[60] = new Rule(-16, new int[]{-16,81,4});
    rules[61] = new Rule(-16, new int[]{-16,82});
    rules[62] = new Rule(-19, new int[]{36,7});
    rules[63] = new Rule(-20, new int[]{142,37,-21,143,37});
    rules[64] = new Rule(-21, new int[]{5,4});
    rules[65] = new Rule(-21, new int[]{-21,-22});
    rules[66] = new Rule(-22, new int[]{142,38,-23,143,38});
    rules[67] = new Rule(-23, new int[]{4});
    rules[68] = new Rule(-23, new int[]{-23,4});
    rules[69] = new Rule(-23, new int[]{-23,39,5});
    rules[70] = new Rule(-24, new int[]{142,43,-25,143,43});
    rules[71] = new Rule(-25, new int[]{7,5,7,5,5});
    rules[72] = new Rule(-25, new int[]{-25,45,4,4,4,4,4,4});
    rules[73] = new Rule(-25, new int[]{-25,46,4,4});
    rules[74] = new Rule(-25, new int[]{-25,44,7});
    rules[75] = new Rule(-25, new int[]{-25,-42});
    rules[76] = new Rule(-25, new int[]{-25,76,7});
    rules[77] = new Rule(-25, new int[]{-25,104,7});
    rules[78] = new Rule(-42, new int[]{142,61,5,143,61});
    rules[79] = new Rule(-42, new int[]{142,61,5,62,5,143,61});
    rules[80] = new Rule(-17, new int[]{142,109,-18,143,109});
    rules[81] = new Rule(-18, new int[]{7,5,7,4,7,4,7,4,4});
    rules[82] = new Rule(-18, new int[]{-18,-7});
    rules[83] = new Rule(-18, new int[]{-18,142,18,-12,143,18});
    rules[84] = new Rule(-18, new int[]{-18,33,4});
    rules[85] = new Rule(-18, new int[]{-18,-3});
    rules[86] = new Rule(-18, new int[]{-18,35,7});
    rules[87] = new Rule(-18, new int[]{-18,-19});
    rules[88] = new Rule(-18, new int[]{-18,142,96,5,-87,143,96});
    rules[89] = new Rule(-18, new int[]{-18,55});
    rules[90] = new Rule(-18, new int[]{-18,54,7});
    rules[91] = new Rule(-18, new int[]{-18,-34});
    rules[92] = new Rule(-18, new int[]{-18,112,5});
    rules[93] = new Rule(-18, new int[]{-18,60,4,4});
    rules[94] = new Rule(-18, new int[]{-18,-40});
    rules[95] = new Rule(-18, new int[]{-18,85});
    rules[96] = new Rule(-18, new int[]{-18,-62});
    rules[97] = new Rule(-18, new int[]{-18,142,106,-87,143,106});
    rules[98] = new Rule(-18, new int[]{-18,-32});
    rules[99] = new Rule(-18, new int[]{-18,-60});
    rules[100] = new Rule(-18, new int[]{-18,93,4});
    rules[101] = new Rule(-18, new int[]{-18,117,5});
    rules[102] = new Rule(-18, new int[]{-18,115});
    rules[103] = new Rule(-18, new int[]{-18,120,7});
    rules[104] = new Rule(-18, new int[]{-18,105,4});
    rules[105] = new Rule(-18, new int[]{-18,-61});
    rules[106] = new Rule(-18, new int[]{-18,142,129,5,-87,143,129});
    rules[107] = new Rule(-26, new int[]{142,40,-27,143,40});
    rules[108] = new Rule(-27, new int[]{7,5,7,4});
    rules[109] = new Rule(-27, new int[]{-27,4,4});
    rules[110] = new Rule(-27, new int[]{-27,-85});
    rules[111] = new Rule(-27, new int[]{-27,-86});
    rules[112] = new Rule(-28, new int[]{142,41,-29,143,41});
    rules[113] = new Rule(-29, new int[]{7,5,7,4});
    rules[114] = new Rule(-29, new int[]{-29,4,5});
    rules[115] = new Rule(-29, new int[]{-29,-85});
    rules[116] = new Rule(-30, new int[]{142,42,-31,143,42});
    rules[117] = new Rule(-31, new int[]{7,5,4});
    rules[118] = new Rule(-31, new int[]{-31,4,4,5});
    rules[119] = new Rule(-31, new int[]{-31,-85});
    rules[120] = new Rule(-85, new int[]{51,5});
    rules[121] = new Rule(-86, new int[]{52,4});
    rules[122] = new Rule(-54, new int[]{142,84,-55,143,84});
    rules[123] = new Rule(-55, new int[]{7,5});
    rules[124] = new Rule(-55, new int[]{-55,-56});
    rules[125] = new Rule(-55, new int[]{-55,-47});
    rules[126] = new Rule(-56, new int[]{142,86,-57,143,86});
    rules[127] = new Rule(-57, new int[]{5});
    rules[128] = new Rule(-57, new int[]{-57,99,5});
    rules[129] = new Rule(-57, new int[]{-57,100,7});
    rules[130] = new Rule(-47, new int[]{142,88,-48,143,88});
    rules[131] = new Rule(-48, new int[]{7,5});
    rules[132] = new Rule(-48, new int[]{-48,-43});
    rules[133] = new Rule(-48, new int[]{-48,-58});
    rules[134] = new Rule(-48, new int[]{-48,-62});
    rules[135] = new Rule(-48, new int[]{-48,-4});
    rules[136] = new Rule(-48, new int[]{-48,-24});
    rules[137] = new Rule(-48, new int[]{-48,-26});
    rules[138] = new Rule(-48, new int[]{-48,-28});
    rules[139] = new Rule(-48, new int[]{-48,-30});
    rules[140] = new Rule(-48, new int[]{-48,-71});
    rules[141] = new Rule(-48, new int[]{-48,-45});
    rules[142] = new Rule(-48, new int[]{-48,-17});
    rules[143] = new Rule(-48, new int[]{-48,-13});
    rules[144] = new Rule(-48, new int[]{-48,-79});
    rules[145] = new Rule(-48, new int[]{-48,-38});
    rules[146] = new Rule(-48, new int[]{-48,-81});
    rules[147] = new Rule(-48, new int[]{-48,-83});
    rules[148] = new Rule(-48, new int[]{-48,-36});
    rules[149] = new Rule(-48, new int[]{-48,-66});
    rules[150] = new Rule(-62, new int[]{142,6});
    rules[151] = new Rule(-43, new int[]{142,89,-44,143,89});
    rules[152] = new Rule(-44, new int[]{5});
    rules[153] = new Rule(-44, new int[]{-44,-2});
    rules[154] = new Rule(-44, new int[]{-44,-3});
    rules[155] = new Rule(-44, new int[]{-44,97,4});
    rules[156] = new Rule(-44, new int[]{-44,98,7});
    rules[157] = new Rule(-44, new int[]{-44,-6});
    rules[158] = new Rule(-45, new int[]{142,90,-46,143,90});
    rules[159] = new Rule(-46, new int[]{5});
    rules[160] = new Rule(-46, new int[]{-46,-5});
    rules[161] = new Rule(-46, new int[]{-46,-20});
    rules[162] = new Rule(-46, new int[]{-46,47,5});
    rules[163] = new Rule(-46, new int[]{-46,49,5});
    rules[164] = new Rule(-46, new int[]{-46,50,5});
    rules[165] = new Rule(-46, new int[]{-46,56,5});
    rules[166] = new Rule(-46, new int[]{-46,57,4});
    rules[167] = new Rule(-46, new int[]{-46,58,5});
    rules[168] = new Rule(-46, new int[]{-46,-52});
    rules[169] = new Rule(-46, new int[]{-46,-50});
    rules[170] = new Rule(-46, new int[]{-46,94,4});
    rules[171] = new Rule(-46, new int[]{-46,101,5});
    rules[172] = new Rule(-46, new int[]{-46,102,5});
    rules[173] = new Rule(-46, new int[]{-46,103,5,5});
    rules[174] = new Rule(-46, new int[]{-46,119,5});
    rules[175] = new Rule(-46, new int[]{-46,99,5});
    rules[176] = new Rule(-32, new int[]{83,4,4,4});
    rules[177] = new Rule(-58, new int[]{142,107,-59,143,107});
    rules[178] = new Rule(-59, new int[]{7,5,7,7,4,4,4,4});
    rules[179] = new Rule(-59, new int[]{-59,-7});
    rules[180] = new Rule(-59, new int[]{-59,-11});
    rules[181] = new Rule(-59, new int[]{-59,33,4});
    rules[182] = new Rule(-59, new int[]{-59,-15});
    rules[183] = new Rule(-59, new int[]{-59,-3});
    rules[184] = new Rule(-59, new int[]{-59,55});
    rules[185] = new Rule(-59, new int[]{-59,54,7});
    rules[186] = new Rule(-59, new int[]{-59,-33});
    rules[187] = new Rule(-59, new int[]{-59,-34});
    rules[188] = new Rule(-59, new int[]{-59,59,4});
    rules[189] = new Rule(-59, new int[]{-59,112,5});
    rules[190] = new Rule(-59, new int[]{-59,-40});
    rules[191] = new Rule(-59, new int[]{-59,113,7});
    rules[192] = new Rule(-59, new int[]{-59,-32});
    rules[193] = new Rule(-59, new int[]{-59,-60});
    rules[194] = new Rule(-59, new int[]{-59,117,5});
    rules[195] = new Rule(-59, new int[]{-59,116});
    rules[196] = new Rule(-59, new int[]{-59,120,7});
    rules[197] = new Rule(-59, new int[]{-59,-61});
    rules[198] = new Rule(-59, new int[]{-59,-69});
    rules[199] = new Rule(-59, new int[]{-59,-62});
    rules[200] = new Rule(-60, new int[]{114,4,4});
    rules[201] = new Rule(-49, new int[]{108,7});
    rules[202] = new Rule(-61, new int[]{121,5,4});
    rules[203] = new Rule(-38, new int[]{142,65,-39,143,65});
    rules[204] = new Rule(-39, new int[]{7,5});
    rules[205] = new Rule(-39, new int[]{-39,-7});
    rules[206] = new Rule(-39, new int[]{-39,66,5});
    rules[207] = new Rule(-39, new int[]{-39,142,71,-87,143,71});
    rules[208] = new Rule(-39, new int[]{-39,-62});
    rules[209] = new Rule(-39, new int[]{-39,142,68,-87,143,68});
    rules[210] = new Rule(-39, new int[]{-39,142,69,-87,143,69});
    rules[211] = new Rule(-39, new int[]{-39,142,70,-87,143,70});
    rules[212] = new Rule(-39, new int[]{-39,-75});
    rules[213] = new Rule(-39, new int[]{-39,142,67,-87,143,67});
    rules[214] = new Rule(-40, new int[]{142,118,-41,143,118});
    rules[215] = new Rule(-41, new int[]{});
    rules[216] = new Rule(-41, new int[]{-41,7});
    rules[217] = new Rule(-69, new int[]{142,122,-70,143,122});
    rules[218] = new Rule(-70, new int[]{});
    rules[219] = new Rule(-70, new int[]{-70,7});
    rules[220] = new Rule(-50, new int[]{142,91,-51,143,91});
    rules[221] = new Rule(-51, new int[]{7,5,7,7,7,4,4,4,4,4,4,4});
    rules[222] = new Rule(-51, new int[]{-51,-62});
    rules[223] = new Rule(-52, new int[]{142,92,-53,143,92});
    rules[224] = new Rule(-53, new int[]{7,4,4,4,4,4,4,4});
    rules[225] = new Rule(-53, new int[]{-53,-62});
    rules[226] = new Rule(-2, new int[]{53,7});
    rules[227] = new Rule(-3, new int[]{95,7});
    rules[228] = new Rule(-33, new int[]{110,4});
    rules[229] = new Rule(-34, new int[]{111,4});
    rules[230] = new Rule(-71, new int[]{142,123,-72,143,123});
    rules[231] = new Rule(-72, new int[]{7,5});
    rules[232] = new Rule(-72, new int[]{-72,-7});
    rules[233] = new Rule(-72, new int[]{-72,-62});
    rules[234] = new Rule(-72, new int[]{-72,-40});
    rules[235] = new Rule(-72, new int[]{-72,-75});
    rules[236] = new Rule(-72, new int[]{-72,-77});
    rules[237] = new Rule(-72, new int[]{-72,128});
    rules[238] = new Rule(-72, new int[]{-72,-73});
    rules[239] = new Rule(-75, new int[]{142,125,-76,143,125});
    rules[240] = new Rule(-76, new int[]{});
    rules[241] = new Rule(-76, new int[]{-76,7});
    rules[242] = new Rule(-77, new int[]{142,126,-78,143,126});
    rules[243] = new Rule(-78, new int[]{});
    rules[244] = new Rule(-78, new int[]{-78,7});
    rules[245] = new Rule(-79, new int[]{142,127,-80,143,127});
    rules[246] = new Rule(-80, new int[]{7});
    rules[247] = new Rule(-80, new int[]{-80,-6});
    rules[248] = new Rule(-80, new int[]{-80,21,4,7,7,7});
    rules[249] = new Rule(-80, new int[]{-80,22,4,7,4,7,7});
    rules[250] = new Rule(-80, new int[]{-80,23,4,7});
    rules[251] = new Rule(-80, new int[]{-80,24,4});
    rules[252] = new Rule(-80, new int[]{-80,75,4,7,7,7});
    rules[253] = new Rule(-80, new int[]{-80,79,4,7});
    rules[254] = new Rule(-80, new int[]{-80,25,4,7});
    rules[255] = new Rule(-80, new int[]{-80,26,4,7});
    rules[256] = new Rule(-80, new int[]{-80,27,4,7});
    rules[257] = new Rule(-80, new int[]{-80,31,4,7});
    rules[258] = new Rule(-80, new int[]{-80,28,4,7});
    rules[259] = new Rule(-80, new int[]{-80,29,4,7});
    rules[260] = new Rule(-80, new int[]{-80,30,4,7});
    rules[261] = new Rule(-80, new int[]{-80,32});
    rules[262] = new Rule(-73, new int[]{142,124,-74,143,124});
    rules[263] = new Rule(-74, new int[]{});
    rules[264] = new Rule(-74, new int[]{-74,7});
    rules[265] = new Rule(-81, new int[]{142,130,-82,143,130});
    rules[266] = new Rule(-82, new int[]{7,5,5,7});
    rules[267] = new Rule(-82, new int[]{-82,76,7});
    rules[268] = new Rule(-82, new int[]{-82,78,4,4,4,4,4,4,4});
    rules[269] = new Rule(-82, new int[]{-82,77,4,4});
    rules[270] = new Rule(-83, new int[]{142,131,-84,143,131});
    rules[271] = new Rule(-84, new int[]{7});
    rules[272] = new Rule(-84, new int[]{-84,142,132,-87,143,132});
    rules[273] = new Rule(-84, new int[]{-84,115});
    rules[274] = new Rule(-36, new int[]{142,63,-37,143,63});
    rules[275] = new Rule(-37, new int[]{7,5,4,4});
    rules[276] = new Rule(-37, new int[]{-37,64,-87});
    rules[277] = new Rule(-37, new int[]{-37,-62});
    rules[278] = new Rule(-66, new int[]{142,138,-67,143,138});
    rules[279] = new Rule(-67, new int[]{});
    rules[280] = new Rule(-67, new int[]{-67,142,134,-64,143,134});
    rules[281] = new Rule(-67, new int[]{-67,142,135,-65,143,135});
    rules[282] = new Rule(-67, new int[]{-67,142,139,-68,143,139});
    rules[283] = new Rule(-67, new int[]{-67,140,5});
    rules[284] = new Rule(-67, new int[]{-67,141,7});
    rules[285] = new Rule(-68, new int[]{});
    rules[286] = new Rule(-68, new int[]{-68,7,7});
    rules[287] = new Rule(-65, new int[]{7,5});
    rules[288] = new Rule(-65, new int[]{-65,7});
    rules[289] = new Rule(-65, new int[]{-65,136,7});
    rules[290] = new Rule(-65, new int[]{-65,137,7});
    rules[291] = new Rule(-64, new int[]{7});
    rules[292] = new Rule(-64, new int[]{-64,7});
    rules[293] = new Rule(-64, new int[]{-64,142,133,-63,143,133});
    rules[294] = new Rule(-63, new int[]{});
    rules[295] = new Rule(-63, new int[]{-63,4});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 3: // Asap2File -> Asap2File, project
{
        Asap2File.elements.Add(ValueStack[ValueStack.Depth-1].project);
    }
        break;
      case 4: // Asap2File -> Asap2File, ASAP2_VERSION, NUMBER, NUMBER
{
        Asap2File.elements.Add(new ASAP2_VERSION(LocationStack[LocationStack.Depth-3], (uint)ValueStack[ValueStack.Depth-2].d, (uint)ValueStack[ValueStack.Depth-1].d));
    }
        break;
      case 5: // Asap2File -> Asap2File, A2ML_VERSION, NUMBER, NUMBER
{
        Asap2File.elements.Add(new A2ML_VERSION(LocationStack[LocationStack.Depth-3], (uint)ValueStack[ValueStack.Depth-2].d, (uint)ValueStack[ValueStack.Depth-1].d));
    }
        break;
      case 6: // IDENTIFIER_list -> /* empty */
{
        CurrentSemanticValue.IDENTIFIER_list = new List<string>();
    }
        break;
      case 7: // IDENTIFIER_list -> IDENTIFIER_list, IDENTIFIER
{
        CurrentSemanticValue.IDENTIFIER_list = ValueStack[ValueStack.Depth-2].IDENTIFIER_list;
        CurrentSemanticValue.IDENTIFIER_list.Add(ValueStack[ValueStack.Depth-1].s);
    }
        break;
      case 8: // a2ml -> BEGIN, A2ML
{
                                CurrentSemanticValue.a2ml = new A2ML(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].s);
                            }
        break;
      case 9: // addr_epk -> ADDR_EPK, NUMBER
{
                                CurrentSemanticValue.addr_epk = new ADDR_EPK(CurrentLocationSpan, (UInt64)ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 10: // alignment -> ALIGNMENT, NUMBER
{
                                CurrentSemanticValue.alignment = new ALIGNMENT(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].alignment_token, (uint)ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 11: // annotation -> BEGIN, ANNOTATION, annotation_data, END, ANNOTATION
{
                                CurrentSemanticValue.annotation = ValueStack[ValueStack.Depth-3].annotation;
                            }
        break;
      case 12: // annotation_data -> /* empty */
{
                                CurrentSemanticValue.annotation = new ANNOTATION(CurrentLocationSpan);
                            }
        break;
      case 13: // annotation_data -> annotation_data, ANNOTATION_LABEL, QUOTED_STRING
{
                                CurrentSemanticValue.annotation = ValueStack[ValueStack.Depth-3].annotation;
                                CurrentSemanticValue.annotation.annotation_label = new ANNOTATION_LABEL(LocationStack[LocationStack.Depth-2], ValueStack[ValueStack.Depth-1].s);
                            }
        break;
      case 14: // annotation_data -> annotation_data, ANNOTATION_ORIGIN, QUOTED_STRING
{
                                CurrentSemanticValue.annotation = ValueStack[ValueStack.Depth-3].annotation;
                                CurrentSemanticValue.annotation.annotation_origin = new ANNOTATION_ORIGIN(LocationStack[LocationStack.Depth-2], ValueStack[ValueStack.Depth-1].s);
                            }
        break;
      case 15: // annotation_data -> annotation_data, annotation_text
{
                                CurrentSemanticValue.annotation = ValueStack[ValueStack.Depth-2].annotation;
                                CurrentSemanticValue.annotation.annotation_text = ValueStack[ValueStack.Depth-1].annotation_text;
                            }
        break;
      case 16: // annotation_text -> BEGIN, ANNOTATION_TEXT, annotation_text_data, END, 
               //                    ANNOTATION_TEXT
{
                                CurrentSemanticValue.annotation_text = ValueStack[ValueStack.Depth-3].annotation_text;
                            }
        break;
      case 17: // annotation_text_data -> /* empty */
{
                                CurrentSemanticValue.annotation_text = new ANNOTATION_TEXT(CurrentLocationSpan);
                            }
        break;
      case 18: // annotation_text_data -> annotation_text_data, QUOTED_STRING
{
                                CurrentSemanticValue.annotation_text = ValueStack[ValueStack.Depth-2].annotation_text;
                                CurrentSemanticValue.annotation_text.data.Add(ValueStack[ValueStack.Depth-1].s);
                            }
        break;
      case 19: // array_size -> ARRAY_SIZE, NUMBER
{
                                CurrentSemanticValue.array_size = new ARRAY_SIZE(LocationStack[LocationStack.Depth-2], (ulong)ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 20: // axis_descr -> IDENTIFIER, IDENTIFIER, IDENTIFIER, NUMBER, NUMBER, NUMBER
{
        CurrentSemanticValue.axis_descr = new AXIS_DESCR(CurrentLocationSpan, attribute: (AXIS_DESCR.Attribute)EnumToStringOrAbort(typeof(AXIS_DESCR.Attribute), ValueStack[ValueStack.Depth-6].s), InputQuantity: ValueStack[ValueStack.Depth-5].s, Conversion: ValueStack[ValueStack.Depth-4].s, MaxAxisPoints: (UInt64)ValueStack[ValueStack.Depth-3].d, LowerLimit: ValueStack[ValueStack.Depth-2].d, UpperLimit: ValueStack[ValueStack.Depth-1].d);
    }
        break;
      case 21: // axis_descr -> axis_descr, annotation
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-2].axis_descr;
        CurrentSemanticValue.axis_descr.annotation.Add(ValueStack[ValueStack.Depth-1].annotation);
    }
        break;
      case 22: // axis_descr -> axis_descr, AXIS_PTS_REF, IDENTIFIER
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-3].axis_descr;
        CurrentSemanticValue.axis_descr.axis_pts_ref = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 23: // axis_descr -> axis_descr, byte_order
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-2].axis_descr;
        CurrentSemanticValue.axis_descr.byte_order = ValueStack[ValueStack.Depth-1].byte_order;
    }
        break;
      case 24: // axis_descr -> axis_descr, CURVE_AXIS_REF, IDENTIFIER
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-3].axis_descr;
        CurrentSemanticValue.axis_descr.curve_axis_ref = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 25: // axis_descr -> axis_descr, deposit
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-2].axis_descr;
        CurrentSemanticValue.axis_descr.deposit = ValueStack[ValueStack.Depth-1].deposit;
    }
        break;
      case 26: // axis_descr -> axis_descr, EXTENDED_LIMITS, NUMBER, NUMBER
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-4].axis_descr;
        CurrentSemanticValue.axis_descr.extended_limits = new EXTENDED_LIMITS(LocationStack[LocationStack.Depth-3], ValueStack[ValueStack.Depth-2].d, ValueStack[ValueStack.Depth-1].d);
    }
        break;
      case 27: // axis_descr -> axis_descr, FIX_AXIS_PAR, NUMBER, NUMBER, NUMBER
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-5].axis_descr;
        CurrentSemanticValue.axis_descr.fix_axis_par = new FIX_AXIS_PAR(LocationStack[LocationStack.Depth-4], (Int64)ValueStack[ValueStack.Depth-3].d, (Int64)ValueStack[ValueStack.Depth-2].d, (UInt64)ValueStack[ValueStack.Depth-1].d);
    }
        break;
      case 28: // axis_descr -> axis_descr, FIX_AXIS_PAR_DIST, NUMBER, NUMBER, NUMBER
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-5].axis_descr;
        CurrentSemanticValue.axis_descr.fix_axis_par_dist = new FIX_AXIS_PAR_DIST(LocationStack[LocationStack.Depth-4], (Int64)ValueStack[ValueStack.Depth-3].d, (Int64)ValueStack[ValueStack.Depth-2].d, (UInt64)ValueStack[ValueStack.Depth-1].d);
    }
        break;
      case 29: // axis_descr -> axis_descr, BEGIN, FIX_AXIS_PAR_LIST, fix_axis_par_list, END, 
               //               FIX_AXIS_PAR_LIST
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-6].axis_descr;
        CurrentSemanticValue.axis_descr.fix_axis_par_list = ValueStack[ValueStack.Depth-3].fix_axis_par_list;
    }
        break;
      case 30: // axis_descr -> axis_descr, FORMAT, QUOTED_STRING
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-3].axis_descr;
        CurrentSemanticValue.axis_descr.format = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 31: // axis_descr -> axis_descr, MAX_GRAD, NUMBER
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-3].axis_descr;
        CurrentSemanticValue.axis_descr.max_grad = ValueStack[ValueStack.Depth-1].d;
    }
        break;
      case 32: // axis_descr -> axis_descr, monotony
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-2].axis_descr;
        CurrentSemanticValue.axis_descr.monotony = ValueStack[ValueStack.Depth-1].monotony;
    }
        break;
      case 33: // axis_descr -> axis_descr, PHYS_UNIT, QUOTED_STRING
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-3].axis_descr;
        CurrentSemanticValue.axis_descr.phys_unit = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 34: // axis_descr -> axis_descr, READ_ONLY
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-2].axis_descr;
        CurrentSemanticValue.axis_descr.read_only = new READ_ONLY(LocationStack[LocationStack.Depth-1]);
    }
        break;
      case 35: // axis_descr -> axis_descr, STEP_SIZE, NUMBER
{
        CurrentSemanticValue.axis_descr = ValueStack[ValueStack.Depth-3].axis_descr;
        CurrentSemanticValue.axis_descr.step_size = ValueStack[ValueStack.Depth-1].d;
    }
        break;
      case 36: // axis_pts -> BEGIN, AXIS_PTS, axis_pts_data, END, AXIS_PTS
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-3].axis_pts;
    }
        break;
      case 37: // axis_pts_data -> IDENTIFIER, QUOTED_STRING, NUMBER, IDENTIFIER, IDENTIFIER, 
               //                  NUMBER, IDENTIFIER, NUMBER, NUMBER, NUMBER
{
        CurrentSemanticValue.axis_pts = new AXIS_PTS(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-10].s, LongIdentifier: ValueStack[ValueStack.Depth-9].s, Address: (UInt64)ValueStack[ValueStack.Depth-8].d, InputQuantity: ValueStack[ValueStack.Depth-7].s, Deposit: ValueStack[ValueStack.Depth-6].s, MaxDiff: ValueStack[ValueStack.Depth-5].d, Conversion: ValueStack[ValueStack.Depth-4].s, MaxAxisPoints: (UInt64)ValueStack[ValueStack.Depth-3].d, LowerLimit: ValueStack[ValueStack.Depth-2].d, UpperLimit: ValueStack[ValueStack.Depth-1].d);
    }
        break;
      case 38: // axis_pts_data -> axis_pts_data, annotation
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-2].axis_pts;
        CurrentSemanticValue.axis_pts.annotation.Add(ValueStack[ValueStack.Depth-1].annotation);
    }
        break;
      case 39: // axis_pts_data -> axis_pts_data, byte_order
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-2].axis_pts;
        CurrentSemanticValue.axis_pts.byte_order = ValueStack[ValueStack.Depth-1].byte_order;
    }
        break;
      case 40: // axis_pts_data -> axis_pts_data, calibration_access
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-2].axis_pts;
        CurrentSemanticValue.axis_pts.calibration_access = ValueStack[ValueStack.Depth-1].calibration_access;
    }
        break;
      case 41: // axis_pts_data -> axis_pts_data, deposit
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-2].axis_pts;
        CurrentSemanticValue.axis_pts.deposit = ValueStack[ValueStack.Depth-1].deposit;
    }
        break;
      case 42: // axis_pts_data -> axis_pts_data, DISPLAY_IDENTIFIER, IDENTIFIER
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-3].axis_pts;
        CurrentSemanticValue.axis_pts.display_identifier = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 43: // axis_pts_data -> axis_pts_data, ecu_address_extension
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-2].axis_pts;
        CurrentSemanticValue.axis_pts.ecu_address_extension = ValueStack[ValueStack.Depth-1].ecu_address_ext;
    }
        break;
      case 44: // axis_pts_data -> axis_pts_data, EXTENDED_LIMITS, NUMBER, NUMBER
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-4].axis_pts;
        CurrentSemanticValue.axis_pts.extended_limits = new EXTENDED_LIMITS(LocationStack[LocationStack.Depth-3], ValueStack[ValueStack.Depth-2].d, ValueStack[ValueStack.Depth-1].d);
    }
        break;
      case 45: // axis_pts_data -> axis_pts_data, FORMAT, QUOTED_STRING
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-3].axis_pts;
        CurrentSemanticValue.axis_pts.format = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 46: // axis_pts_data -> axis_pts_data, function_list
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-2].axis_pts;
        CurrentSemanticValue.axis_pts.function_list = ValueStack[ValueStack.Depth-1].function_list;
    }
        break;
      case 47: // axis_pts_data -> axis_pts_data, GUARD_RAILS
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-2].axis_pts;
        CurrentSemanticValue.axis_pts.guard_rails = new GUARD_RAILS(LocationStack[LocationStack.Depth-1]);
    }
        break;
      case 48: // axis_pts_data -> axis_pts, if_data
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-2].axis_pts;
        CurrentSemanticValue.axis_pts.if_data.Add(ValueStack[ValueStack.Depth-1].if_data);
    }
        break;
      case 49: // axis_pts_data -> axis_pts_data, monotony
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-2].axis_pts;
        CurrentSemanticValue.axis_pts.monotony = ValueStack[ValueStack.Depth-1].monotony;
    }
        break;
      case 50: // axis_pts_data -> axis_pts_data, PHYS_UNIT, QUOTED_STRING
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-3].axis_pts;
        CurrentSemanticValue.axis_pts.phys_unit = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 51: // axis_pts_data -> axis_pts_data, READ_ONLY
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-2].axis_pts;
        CurrentSemanticValue.axis_pts.read_only = new READ_ONLY(LocationStack[LocationStack.Depth-1]);
    }
        break;
      case 52: // axis_pts_data -> axis_pts_data, REF_MEMORY_SEGMENT, IDENTIFIER
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-3].axis_pts;
        CurrentSemanticValue.axis_pts.ref_memory_segment = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 53: // axis_pts_data -> axis_pts_data, STEP_SIZE, NUMBER
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-3].axis_pts;
        CurrentSemanticValue.axis_pts.step_size = ValueStack[ValueStack.Depth-1].d;
    }
        break;
      case 54: // axis_pts_data -> axis_pts_data, symbol_link
{
        CurrentSemanticValue.axis_pts = ValueStack[ValueStack.Depth-2].axis_pts;
        CurrentSemanticValue.axis_pts.symbol_link = ValueStack[ValueStack.Depth-1].symbol_link;
    }
        break;
      case 55: // fix_axis_par_list -> /* empty */
{
        CurrentSemanticValue.fix_axis_par_list = new FIX_AXIS_PAR_LIST(CurrentLocationSpan);
    }
        break;
      case 56: // fix_axis_par_list -> fix_axis_par_list, NUMBER
{
        CurrentSemanticValue.fix_axis_par_list = ValueStack[ValueStack.Depth-2].fix_axis_par_list;
        CurrentSemanticValue.fix_axis_par_list.AxisPts_Values.Add(ValueStack[ValueStack.Depth-1].d);
    }
        break;
      case 57: // bit_operation -> BEGIN, BIT_OPERATION, bit_operation_data, END, BIT_OPERATION
{
                                CurrentSemanticValue.bit_operation = ValueStack[ValueStack.Depth-3].bit_operation;
                            }
        break;
      case 58: // bit_operation_data -> /* empty */
{
                                CurrentSemanticValue.bit_operation = new BIT_OPERATION(CurrentLocationSpan);
                            }
        break;
      case 59: // bit_operation_data -> bit_operation_data, RIGHT_SHIFT, NUMBER
{
                                CurrentSemanticValue.bit_operation = ValueStack[ValueStack.Depth-3].bit_operation;
                                CurrentSemanticValue.bit_operation.right_shift = new RIGHT_SHIFT(LocationStack[LocationStack.Depth-2], (ulong)ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 60: // bit_operation_data -> bit_operation_data, LEFT_SHIFT, NUMBER
{
                                CurrentSemanticValue.bit_operation = ValueStack[ValueStack.Depth-3].bit_operation;
                                CurrentSemanticValue.bit_operation.left_shift = new LEFT_SHIFT(LocationStack[LocationStack.Depth-2], (ulong)ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 61: // bit_operation_data -> bit_operation_data, SIGN_EXTEND
{
                                CurrentSemanticValue.bit_operation = ValueStack[ValueStack.Depth-2].bit_operation;
                                CurrentSemanticValue.bit_operation.sign_extend = new SIGN_EXTEND(LocationStack[LocationStack.Depth-1]);
                            }
        break;
      case 62: // calibration_access -> CALIBRATION_ACCESS, IDENTIFIER
{
                                CurrentSemanticValue.calibration_access = new CALIBRATION_ACCESS(LocationStack[LocationStack.Depth-2], (CALIBRATION_ACCESS.CALIBRATION_ACCESS_type)EnumToStringOrAbort(typeof(CALIBRATION_ACCESS.CALIBRATION_ACCESS_type), ValueStack[ValueStack.Depth-1].s));
                            }
        break;
      case 63: // calibration_method -> BEGIN, CALIBRATION_METHOD, calibration_method_data, END, 
               //                       CALIBRATION_METHOD
{
                                CurrentSemanticValue.calibration_method = ValueStack[ValueStack.Depth-3].calibration_method;
                            }
        break;
      case 64: // calibration_method_data -> QUOTED_STRING, NUMBER
{
                                CurrentSemanticValue.calibration_method = new CALIBRATION_METHOD(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].s, (ulong)ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 65: // calibration_method_data -> calibration_method_data, calibration_handle
{
                                CurrentSemanticValue.calibration_method = ValueStack[ValueStack.Depth-2].calibration_method;
                                CurrentSemanticValue.calibration_method.calibration_handle = ValueStack[ValueStack.Depth-1].calibration_handle;
                            }
        break;
      case 66: // calibration_handle -> BEGIN, CALIBRATION_HANDLE, calibration_handle_data, END, 
               //                       CALIBRATION_HANDLE
{
                                CurrentSemanticValue.calibration_handle = ValueStack[ValueStack.Depth-3].calibration_handle;
                            }
        break;
      case 67: // calibration_handle_data -> NUMBER
{
                                CurrentSemanticValue.calibration_handle = new CALIBRATION_HANDLE(CurrentLocationSpan);
                                CurrentSemanticValue.calibration_handle.Handles.Add((Int64)ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 68: // calibration_handle_data -> calibration_handle_data, NUMBER
{
                                CurrentSemanticValue.calibration_handle = ValueStack[ValueStack.Depth-2].calibration_handle;
                                CurrentSemanticValue.calibration_handle.Handles.Add((Int64)ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 69: // calibration_handle_data -> calibration_handle_data, CALIBRATION_HANDLE_TEXT, 
               //                            QUOTED_STRING
{
                                CurrentSemanticValue.calibration_handle = ValueStack[ValueStack.Depth-3].calibration_handle;
                                CurrentSemanticValue.calibration_handle.text = ValueStack[ValueStack.Depth-1].s;
                            }
        break;
      case 70: // compu_method -> BEGIN, COMPU_METHOD, compu_method_data, END, COMPU_METHOD
{
                                CurrentSemanticValue.compu_method = ValueStack[ValueStack.Depth-3].compu_method;
                            }
        break;
      case 71: // compu_method_data -> IDENTIFIER, QUOTED_STRING, IDENTIFIER, QUOTED_STRING, 
               //                      QUOTED_STRING
{
                                ConversionType conversionType;  
                                conversionType = (ConversionType)EnumToStringOrAbort(typeof(ConversionType), ValueStack[ValueStack.Depth-3].s);
                                CurrentSemanticValue.compu_method = new COMPU_METHOD(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-5].s, LongIdentifier: ValueStack[ValueStack.Depth-4].s, conversionType: conversionType, Format: ValueStack[ValueStack.Depth-2].s, Unit: ValueStack[ValueStack.Depth-1].s);
                            }
        break;
      case 72: // compu_method_data -> compu_method_data, COEFFS, NUMBER, NUMBER, NUMBER, NUMBER, 
               //                      NUMBER, NUMBER
{
                                CurrentSemanticValue.compu_method = ValueStack[ValueStack.Depth-8].compu_method;
                                CurrentSemanticValue.compu_method.coeffs = new COEFFS(location: LocationStack[LocationStack.Depth-7], a: ValueStack[ValueStack.Depth-6].d, b: ValueStack[ValueStack.Depth-5].d, c: ValueStack[ValueStack.Depth-4].d, d: ValueStack[ValueStack.Depth-3].d, e: ValueStack[ValueStack.Depth-2].d, f: ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 73: // compu_method_data -> compu_method_data, COEFFS_LINEAR, NUMBER, NUMBER
{
                                CurrentSemanticValue.compu_method = ValueStack[ValueStack.Depth-4].compu_method;
                                CurrentSemanticValue.compu_method.coeffs_linear = new COEFFS_LINEAR(location: LocationStack[LocationStack.Depth-3], a: ValueStack[ValueStack.Depth-2].d, b: ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 74: // compu_method_data -> compu_method_data, COMPU_TAB_REF, IDENTIFIER
{
                                CurrentSemanticValue.compu_method = ValueStack[ValueStack.Depth-3].compu_method;
                                CurrentSemanticValue.compu_method.compu_tab_ref = ValueStack[ValueStack.Depth-1].s;
                            }
        break;
      case 75: // compu_method_data -> compu_method_data, formula
{
                                CurrentSemanticValue.compu_method = ValueStack[ValueStack.Depth-2].compu_method;
                                CurrentSemanticValue.compu_method.formula = ValueStack[ValueStack.Depth-1].formula;
                            }
        break;
      case 76: // compu_method_data -> compu_method_data, REF_UNIT, IDENTIFIER
{
                                CurrentSemanticValue.compu_method = ValueStack[ValueStack.Depth-3].compu_method;
                                CurrentSemanticValue.compu_method.ref_unit = ValueStack[ValueStack.Depth-1].s;
                            }
        break;
      case 77: // compu_method_data -> compu_method_data, STATUS_STRING_REF, IDENTIFIER
{
                                CurrentSemanticValue.compu_method = ValueStack[ValueStack.Depth-3].compu_method;
                                CurrentSemanticValue.compu_method.status_string_ref = ValueStack[ValueStack.Depth-1].s;
                            }
        break;
      case 78: // formula -> BEGIN, FORMULA, QUOTED_STRING, END, FORMULA
{
                                CurrentSemanticValue.formula = new FORMULA(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].s);
                            }
        break;
      case 79: // formula -> BEGIN, FORMULA, QUOTED_STRING, FORMULA_INV, QUOTED_STRING, END, 
               //            FORMULA
{
                                CurrentSemanticValue.formula = new FORMULA(CurrentLocationSpan, ValueStack[ValueStack.Depth-5].s);
                                CurrentSemanticValue.formula.formula_inv = ValueStack[ValueStack.Depth-3].s;
                            }
        break;
      case 80: // characteristic -> BEGIN, CHARACTERISTIC, characteristic_data, END, 
               //                   CHARACTERISTIC
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-3].characteristic;
    }
        break;
      case 81: // characteristic_data -> IDENTIFIER, QUOTED_STRING, IDENTIFIER, NUMBER, 
               //                        IDENTIFIER, NUMBER, IDENTIFIER, NUMBER, NUMBER
{
        CHARACTERISTIC.Type type = (CHARACTERISTIC.Type)EnumToStringOrAbort(typeof(CHARACTERISTIC.Type), ValueStack[ValueStack.Depth-7].s);
        CurrentSemanticValue.characteristic = new CHARACTERISTIC(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-9].s, LongIdentifier: ValueStack[ValueStack.Depth-8].s, type: type, Address: (UInt64)ValueStack[ValueStack.Depth-6].d, Deposit: ValueStack[ValueStack.Depth-5].s, MaxDiff: ValueStack[ValueStack.Depth-4].d, Conversion: ValueStack[ValueStack.Depth-3].s, LowerLimit: ValueStack[ValueStack.Depth-2].d, UpperLimit: ValueStack[ValueStack.Depth-1].d);
    }
        break;
      case 82: // characteristic_data -> characteristic_data, annotation
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-2].characteristic;
        CurrentSemanticValue.characteristic.annotation.Add(ValueStack[ValueStack.Depth-1].annotation);
    }
        break;
      case 83: // characteristic_data -> characteristic_data, BEGIN, AXIS_DESCR, axis_descr, END, 
               //                        AXIS_DESCR
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-6].characteristic;
        CurrentSemanticValue.characteristic.axis_descr.Add(ValueStack[ValueStack.Depth-3].axis_descr);
    }
        break;
      case 84: // characteristic_data -> characteristic_data, BIT_MASK, NUMBER
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-3].characteristic;
        CurrentSemanticValue.characteristic.bit_mask = (UInt64)ValueStack[ValueStack.Depth-1].d;
    }
        break;
      case 85: // characteristic_data -> characteristic_data, byte_order
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-2].characteristic;
        CurrentSemanticValue.characteristic.byte_order = ValueStack[ValueStack.Depth-1].byte_order;
    }
        break;
      case 86: // characteristic_data -> characteristic_data, COMPARISON_QUANTITY, IDENTIFIER
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-3].characteristic;
        CurrentSemanticValue.characteristic.comparison_quantity = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 87: // characteristic_data -> characteristic_data, calibration_access
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-2].characteristic;
        CurrentSemanticValue.characteristic.calibration_access = ValueStack[ValueStack.Depth-1].calibration_access;
    }
        break;
      case 88: // characteristic_data -> characteristic_data, BEGIN, DEPENDENT_CHARACTERISTIC, 
               //                        QUOTED_STRING, IDENTIFIER_list, END, 
               //                        DEPENDENT_CHARACTERISTIC
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-7].characteristic;
        CurrentSemanticValue.characteristic.dependent_characteristic = new DEPENDENT_CHARACTERISTIC(LocationStack[LocationStack.Depth-6], ValueStack[ValueStack.Depth-4].s);
        CurrentSemanticValue.characteristic.dependent_characteristic.Characteristic = ValueStack[ValueStack.Depth-3].IDENTIFIER_list;
    }
        break;
      case 89: // characteristic_data -> characteristic_data, DISCRETE
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-2].characteristic;
        CurrentSemanticValue.characteristic.discrete = new DISCRETE(LocationStack[LocationStack.Depth-1]);
    }
        break;
      case 90: // characteristic_data -> characteristic_data, DISPLAY_IDENTIFIER, IDENTIFIER
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-3].characteristic;
        CurrentSemanticValue.characteristic.display_identifier = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 91: // characteristic_data -> characteristic_data, ecu_address_extension
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-2].characteristic;
        CurrentSemanticValue.characteristic.ecu_address_extension = ValueStack[ValueStack.Depth-1].ecu_address_ext;
    }
        break;
      case 92: // characteristic_data -> characteristic_data, FORMAT, QUOTED_STRING
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-3].characteristic;
        CurrentSemanticValue.characteristic.format = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 93: // characteristic_data -> characteristic_data, EXTENDED_LIMITS, NUMBER, NUMBER
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-4].characteristic;
        CurrentSemanticValue.characteristic.extended_limits = new EXTENDED_LIMITS(LocationStack[LocationStack.Depth-3], ValueStack[ValueStack.Depth-2].d, ValueStack[ValueStack.Depth-1].d);
    }
        break;
      case 94: // characteristic_data -> characteristic_data, function_list
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-2].characteristic;
        CurrentSemanticValue.characteristic.function_list = ValueStack[ValueStack.Depth-1].function_list;
    }
        break;
      case 95: // characteristic_data -> characteristic_data, GUARD_RAILS
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-2].characteristic;
        CurrentSemanticValue.characteristic.guard_rails = new GUARD_RAILS(LocationStack[LocationStack.Depth-1]);
    }
        break;
      case 96: // characteristic_data -> characteristic_data, if_data
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-2].characteristic;
        CurrentSemanticValue.characteristic.if_data.Add(ValueStack[ValueStack.Depth-1].if_data);
    }
        break;
      case 97: // characteristic_data -> characteristic_data, BEGIN, MAP_LIST, IDENTIFIER_list, 
               //                        END, MAP_LIST
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-6].characteristic;
        CurrentSemanticValue.characteristic.map_list = new MAP_LIST(LocationStack[LocationStack.Depth-5]);
        CurrentSemanticValue.characteristic.map_list.MapList = ValueStack[ValueStack.Depth-3].IDENTIFIER_list;
    }
        break;
      case 98: // characteristic_data -> characteristic_data, matrix_dim
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-2].characteristic;
        CurrentSemanticValue.characteristic.matrix_dim = ValueStack[ValueStack.Depth-1].matrix_dim;
    }
        break;
      case 99: // characteristic_data -> characteristic_data, max_refresh
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-2].characteristic;
        CurrentSemanticValue.characteristic.max_refresh = ValueStack[ValueStack.Depth-1].max_refresh;
    }
        break;
      case 100: // characteristic_data -> characteristic_data, NUMBER_token, NUMBER
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-3].characteristic;
        CurrentSemanticValue.characteristic.number = (UInt64)ValueStack[ValueStack.Depth-1].d;
    }
        break;
      case 101: // characteristic_data -> characteristic_data, PHYS_UNIT, QUOTED_STRING
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-3].characteristic;
        CurrentSemanticValue.characteristic.phys_unit = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 102: // characteristic_data -> characteristic_data, READ_ONLY
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-2].characteristic;
        CurrentSemanticValue.characteristic.read_only = new READ_ONLY(LocationStack[LocationStack.Depth-1]);
    }
        break;
      case 103: // characteristic_data -> characteristic_data, REF_MEMORY_SEGMENT, IDENTIFIER
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-3].characteristic;
        CurrentSemanticValue.characteristic.ref_memory_segment = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 104: // characteristic_data -> characteristic_data, STEP_SIZE, NUMBER
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-3].characteristic;
        CurrentSemanticValue.characteristic.step_size = ValueStack[ValueStack.Depth-1].d;
    }
        break;
      case 105: // characteristic_data -> characteristic_data, symbol_link
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-2].characteristic;
        CurrentSemanticValue.characteristic.symbol_link = ValueStack[ValueStack.Depth-1].symbol_link;
    }
        break;
      case 106: // characteristic_data -> characteristic_data, BEGIN, VIRTUAL_CHARACTERISTIC, 
                //                        QUOTED_STRING, IDENTIFIER_list, END, 
                //                        VIRTUAL_CHARACTERISTIC
{
        CurrentSemanticValue.characteristic = ValueStack[ValueStack.Depth-7].characteristic;
        CurrentSemanticValue.characteristic.virtual_characteristic = new VIRTUAL_CHARACTERISTIC(LocationStack[LocationStack.Depth-6], ValueStack[ValueStack.Depth-4].s);
        CurrentSemanticValue.characteristic.virtual_characteristic.Characteristic = ValueStack[ValueStack.Depth-3].IDENTIFIER_list;
    }
        break;
      case 107: // compu_tab -> BEGIN, COMPU_TAB, compu_tab_data, END, COMPU_TAB
{
                                CurrentSemanticValue.compu_tab = ValueStack[ValueStack.Depth-3].compu_tab;
                            }
        break;
      case 108: // compu_tab_data -> IDENTIFIER, QUOTED_STRING, IDENTIFIER, NUMBER
{
                                ConversionType conversionType = (ConversionType)EnumToStringOrAbort(typeof(ConversionType), ValueStack[ValueStack.Depth-2].s);
                                CurrentSemanticValue.compu_tab = new COMPU_TAB(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-4].s, LongIdentifier: ValueStack[ValueStack.Depth-3].s, conversionType: conversionType, NumberValuePairs: (uint)ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 109: // compu_tab_data -> compu_tab_data, NUMBER, NUMBER
{
                                CurrentSemanticValue.compu_tab = ValueStack[ValueStack.Depth-3].compu_tab;
                                CurrentSemanticValue.compu_tab.data.Add(new COMPU_TAB_DATA(LocationStack[LocationStack.Depth-2], ValueStack[ValueStack.Depth-2].d, ValueStack[ValueStack.Depth-1].d));
                            }
        break;
      case 110: // compu_tab_data -> compu_tab_data, default_value
{
                                CurrentSemanticValue.compu_tab = ValueStack[ValueStack.Depth-2].compu_tab;
                                CurrentSemanticValue.compu_tab.default_value = ValueStack[ValueStack.Depth-1].s;
                            }
        break;
      case 111: // compu_tab_data -> compu_tab_data, default_value_numeric
{
                                CurrentSemanticValue.compu_tab = ValueStack[ValueStack.Depth-2].compu_tab;
                                CurrentSemanticValue.compu_tab.default_value_numeric = ValueStack[ValueStack.Depth-1].d;
                            }
        break;
      case 112: // compu_vtab -> BEGIN, COMPU_VTAB, compu_vtab_data, END, COMPU_VTAB
{
                                CurrentSemanticValue.compu_vtab = ValueStack[ValueStack.Depth-3].compu_vtab;
                            }
        break;
      case 113: // compu_vtab_data -> IDENTIFIER, QUOTED_STRING, IDENTIFIER, NUMBER
{
                                CurrentSemanticValue.compu_vtab = new COMPU_VTAB(CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-4].s, LongIdentifier: ValueStack[ValueStack.Depth-3].s, NumberValuePairs: (uint)ValueStack[ValueStack.Depth-1].d);
                                if (ValueStack[ValueStack.Depth-2].s != CurrentSemanticValue.compu_vtab.ConversionType)
                                {
                                    Scanner.yyerror("Parser warning: Unknown COMPU_VTAB ConversionType: " + ValueStack[ValueStack.Depth-2].s + " expecting: " + CurrentSemanticValue.compu_vtab.ConversionType);
                                }
                            }
        break;
      case 114: // compu_vtab_data -> compu_vtab_data, NUMBER, QUOTED_STRING
{
                                CurrentSemanticValue.compu_vtab = ValueStack[ValueStack.Depth-3].compu_vtab;
                                CurrentSemanticValue.compu_vtab.data.Add(new COMPU_VTAB_DATA(LocationStack[LocationStack.Depth-2], ValueStack[ValueStack.Depth-2].d, ValueStack[ValueStack.Depth-1].s));
                            }
        break;
      case 115: // compu_vtab_data -> compu_vtab_data, default_value
{
                                CurrentSemanticValue.compu_vtab = ValueStack[ValueStack.Depth-2].compu_vtab;
                                CurrentSemanticValue.compu_vtab.default_value = ValueStack[ValueStack.Depth-1].s;
                            }
        break;
      case 116: // compu_vtab_range -> BEGIN, COMPU_VTAB_RANGE, compu_vtab_range_data, END, 
                //                     COMPU_VTAB_RANGE
{
                                CurrentSemanticValue.compu_vtab_range = ValueStack[ValueStack.Depth-3].compu_vtab_range;
                            }
        break;
      case 117: // compu_vtab_range_data -> IDENTIFIER, QUOTED_STRING, NUMBER
{
                                CurrentSemanticValue.compu_vtab_range = new COMPU_VTAB_RANGE(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-3].s, LongIdentifier: ValueStack[ValueStack.Depth-2].s, NumberValueTriples: (uint)ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 118: // compu_vtab_range_data -> compu_vtab_range_data, NUMBER, NUMBER, QUOTED_STRING
{
                                CurrentSemanticValue.compu_vtab_range = ValueStack[ValueStack.Depth-4].compu_vtab_range;
                                CurrentSemanticValue.compu_vtab_range.data.Add(new COMPU_VTAB_RANGE_DATA(LocationStack[LocationStack.Depth-3], ValueStack[ValueStack.Depth-3].d, ValueStack[ValueStack.Depth-2].d, ValueStack[ValueStack.Depth-1].s));
                            }
        break;
      case 119: // compu_vtab_range_data -> compu_vtab_range_data, default_value
{
                                CurrentSemanticValue.compu_vtab_range = ValueStack[ValueStack.Depth-2].compu_vtab_range;
                                CurrentSemanticValue.compu_vtab_range.default_value = ValueStack[ValueStack.Depth-1].s;
                            }
        break;
      case 120: // default_value -> DEFAULT_VALUE, QUOTED_STRING
{
                                CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s;
                            }
        break;
      case 121: // default_value_numeric -> DEFAULT_VALUE_NUMERIC, NUMBER
{
                                CurrentSemanticValue.d = ValueStack[ValueStack.Depth-1].d;
                            }
        break;
      case 122: // project -> BEGIN, PROJECT, project_data, END, PROJECT
{
                                CurrentSemanticValue.project = ValueStack[ValueStack.Depth-3].project;
                            }
        break;
      case 123: // project_data -> IDENTIFIER, QUOTED_STRING
{
                    CurrentSemanticValue.project = new PROJECT(CurrentLocationSpan);
                    CurrentSemanticValue.project.name           = ValueStack[ValueStack.Depth-2].s;
                    CurrentSemanticValue.project.LongIdentifier = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 124: // project_data -> project_data, header
{
                    CurrentSemanticValue.project = ValueStack[ValueStack.Depth-2].project;
                    CurrentSemanticValue.project.header = ValueStack[ValueStack.Depth-1].header;
                }
        break;
      case 125: // project_data -> project_data, module
{
                    CurrentSemanticValue.project = ValueStack[ValueStack.Depth-2].project;
                    try
                    {
                        CurrentSemanticValue.project.modules.Add(ValueStack[ValueStack.Depth-1].module.name, ValueStack[ValueStack.Depth-1].module);
                    }
                    catch (ArgumentException)
                    {
                        Scanner.yyerror(String.Format("Syntax error: Duplicate MODULE with name '{0}' found", ValueStack[ValueStack.Depth-1].module.name));
                        YYAbort();
                    }
                }
        break;
      case 126: // header -> BEGIN, HEADER, header_data, END, HEADER
{
                        CurrentSemanticValue.header = ValueStack[ValueStack.Depth-3].header;
                    }
        break;
      case 127: // header_data -> QUOTED_STRING
{
                    CurrentSemanticValue.header = new HEADER(CurrentLocationSpan);
                    CurrentSemanticValue.header.longIdentifier = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 128: // header_data -> header_data, VERSION, QUOTED_STRING
{
                    CurrentSemanticValue.header = ValueStack[ValueStack.Depth-3].header;
                    CurrentSemanticValue.header.version = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 129: // header_data -> header_data, PROJECT_NO, IDENTIFIER
{
                    CurrentSemanticValue.header = ValueStack[ValueStack.Depth-3].header;
                    CurrentSemanticValue.header.project_no = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 130: // module -> BEGIN, MODULE, module_data, END, MODULE
{                   
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-3].module;
                }
        break;
      case 131: // module_data -> IDENTIFIER, QUOTED_STRING
{
                    CurrentSemanticValue.module = new MODULE(CurrentLocationSpan);
                    CurrentSemanticValue.module.name = ValueStack[ValueStack.Depth-2].s;
                    CurrentSemanticValue.module.LongIdentifier = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 132: // module_data -> module_data, mod_common
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].mod_common);
                }
        break;
      case 133: // module_data -> module_data, measurement
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].measurement);
                }
        break;
      case 134: // module_data -> module_data, if_data
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].if_data);
                }
        break;
      case 135: // module_data -> module_data, a2ml
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].a2ml);
                }
        break;
      case 136: // module_data -> module_data, compu_method
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].compu_method);
                }
        break;
      case 137: // module_data -> module_data, compu_tab
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].compu_tab);
                }
        break;
      case 138: // module_data -> module_data, compu_vtab
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].compu_vtab);
                }
        break;
      case 139: // module_data -> module_data, compu_vtab_range
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].compu_vtab_range);
                }
        break;
      case 140: // module_data -> module_data, group
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].group);
                }
        break;
      case 141: // module_data -> module_data, mod_par
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].mod_par);
                }
        break;
      case 142: // module_data -> module_data, characteristic
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].characteristic);
                }
        break;
      case 143: // module_data -> module_data, axis_pts
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].axis_pts);
                }
        break;
      case 144: // module_data -> module_data, record_layout
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].record_layout);
                }
        break;
      case 145: // module_data -> module_data, function
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].function);
                }
        break;
      case 146: // module_data -> module_data, unit
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].unit);
                }
        break;
      case 147: // module_data -> module_data, user_rights
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].user_rights);
                }
        break;
      case 148: // module_data -> module_data, frame
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].frame);
                }
        break;
      case 149: // module_data -> module_data, variant_coding
{
                    CurrentSemanticValue.module = ValueStack[ValueStack.Depth-2].module;
                    CurrentSemanticValue.module.elements.Add(ValueStack[ValueStack.Depth-1].variant_coding);
                }
        break;
      case 150: // if_data -> BEGIN, IF_DATA
{
                    CurrentSemanticValue.if_data = new IF_DATA(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].s);
                }
        break;
      case 151: // mod_common -> BEGIN, MOD_COMMON, mod_common_data, END, MOD_COMMON
{
                    CurrentSemanticValue.mod_common = ValueStack[ValueStack.Depth-3].mod_common;
                }
        break;
      case 152: // mod_common_data -> QUOTED_STRING
{
                    CurrentSemanticValue.mod_common = new MOD_COMMON(LocationStack[LocationStack.Depth-1], ValueStack[ValueStack.Depth-1].s);
                }
        break;
      case 153: // mod_common_data -> mod_common_data, deposit
{
                    CurrentSemanticValue.mod_common = ValueStack[ValueStack.Depth-2].mod_common;
                    CurrentSemanticValue.mod_common.deposit    = ValueStack[ValueStack.Depth-1].deposit;
                }
        break;
      case 154: // mod_common_data -> mod_common_data, byte_order
{
                    CurrentSemanticValue.mod_common = ValueStack[ValueStack.Depth-2].mod_common;
                    CurrentSemanticValue.mod_common.byte_order = ValueStack[ValueStack.Depth-1].byte_order;
                }
        break;
      case 155: // mod_common_data -> mod_common_data, DATA_SIZE, NUMBER
{
                    CurrentSemanticValue.mod_common = ValueStack[ValueStack.Depth-3].mod_common;
                    CurrentSemanticValue.mod_common.data_size  = (UInt64)ValueStack[ValueStack.Depth-1].d;
                }
        break;
      case 156: // mod_common_data -> mod_common_data, S_REC_LAYOUT, IDENTIFIER
{
                    CurrentSemanticValue.mod_common = ValueStack[ValueStack.Depth-3].mod_common;
                    CurrentSemanticValue.mod_common.s_rec_layout  = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 157: // mod_common_data -> mod_common_data, alignment
{
                    CurrentSemanticValue.mod_common = ValueStack[ValueStack.Depth-2].mod_common;
                    try
                    {
                        CurrentSemanticValue.mod_common.alignments.Add(ValueStack[ValueStack.Depth-1].alignment.name, ValueStack[ValueStack.Depth-1].alignment);
                    }
                    catch (ArgumentException)
                    {
                        Scanner.yyerror(String.Format("Warning: Duplicate '{0}' found, ignoring", ValueStack[ValueStack.Depth-1].alignment.name));
                    }
                }
        break;
      case 158: // mod_par -> BEGIN, MOD_PAR, mod_par_data, END, MOD_PAR
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-3].mod_par;
                }
        break;
      case 159: // mod_par_data -> QUOTED_STRING
{
                    CurrentSemanticValue.mod_par = new MOD_PAR(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].s);
                }
        break;
      case 160: // mod_par_data -> mod_par_data, addr_epk
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-2].mod_par;
                    CurrentSemanticValue.mod_par.addr_epk.Add(ValueStack[ValueStack.Depth-1].addr_epk);
                }
        break;
      case 161: // mod_par_data -> mod_par_data, calibration_method
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-2].mod_par;
                    CurrentSemanticValue.mod_par.calibration_method.Add(ValueStack[ValueStack.Depth-1].calibration_method);
                }
        break;
      case 162: // mod_par_data -> mod_par_data, CPU_TYPE, QUOTED_STRING
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-3].mod_par;
                    CurrentSemanticValue.mod_par.cpu_type = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 163: // mod_par_data -> mod_par_data, CUSTOMER, QUOTED_STRING
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-3].mod_par;
                    CurrentSemanticValue.mod_par.customer = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 164: // mod_par_data -> mod_par_data, CUSTOMER_NO, QUOTED_STRING
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-3].mod_par;
                    CurrentSemanticValue.mod_par.customer_no = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 165: // mod_par_data -> mod_par_data, ECU, QUOTED_STRING
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-3].mod_par;
                    CurrentSemanticValue.mod_par.ecu = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 166: // mod_par_data -> mod_par_data, ECU_CALIBRATION_OFFSET, NUMBER
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-3].mod_par;
                    CurrentSemanticValue.mod_par.ecu_calibration_offset = (Int64)ValueStack[ValueStack.Depth-1].d;
                }
        break;
      case 167: // mod_par_data -> mod_par_data, EPK, QUOTED_STRING
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-3].mod_par;
                    CurrentSemanticValue.mod_par.epk = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 168: // mod_par_data -> mod_par_data, memory_layout
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-2].mod_par;
                    CurrentSemanticValue.mod_par.memory_layout.Add(ValueStack[ValueStack.Depth-1].memory_layout);
                }
        break;
      case 169: // mod_par_data -> mod_par_data, memory_segment
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-2].mod_par;
                    CurrentSemanticValue.mod_par.memory_segment.Add(ValueStack[ValueStack.Depth-1].memory_segment);
                }
        break;
      case 170: // mod_par_data -> mod_par_data, NO_OF_INTERFACES, NUMBER
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-3].mod_par;
                    CurrentSemanticValue.mod_par.no_of_interfaces = (UInt64)ValueStack[ValueStack.Depth-1].d;
                }
        break;
      case 171: // mod_par_data -> mod_par_data, PHONE_NO, QUOTED_STRING
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-3].mod_par;
                    CurrentSemanticValue.mod_par.phone_no = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 172: // mod_par_data -> mod_par_data, SUPPLIER, QUOTED_STRING
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-3].mod_par;
                    CurrentSemanticValue.mod_par.supplier = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 173: // mod_par_data -> mod_par_data, SYSTEM_CONSTANT, QUOTED_STRING, QUOTED_STRING
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-4].mod_par;
                    try
                    {
                        CurrentSemanticValue.mod_par.system_constants.Add(ValueStack[ValueStack.Depth-2].s, new SYSTEM_CONSTANT(LocationStack[LocationStack.Depth-3], ValueStack[ValueStack.Depth-2].s, ValueStack[ValueStack.Depth-1].s));
                    }
                    catch (ArgumentException)
                    {
                        Scanner.yyerror(String.Format("Warning: Duplicate SYSTEM_CONSTANT with name '{0}' found, ignoring", ValueStack[ValueStack.Depth-2].s));
                    }
                }
        break;
      case 174: // mod_par_data -> mod_par_data, USER, QUOTED_STRING
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-3].mod_par;
                    CurrentSemanticValue.mod_par.user = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 175: // mod_par_data -> mod_par_data, VERSION, QUOTED_STRING
{
                    CurrentSemanticValue.mod_par = ValueStack[ValueStack.Depth-3].mod_par;
                    CurrentSemanticValue.mod_par.version = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 176: // matrix_dim -> MATRIX_DIM, NUMBER, NUMBER, NUMBER
{
                    CurrentSemanticValue.matrix_dim = new MATRIX_DIM(CurrentLocationSpan, (uint)ValueStack[ValueStack.Depth-3].d, (uint)ValueStack[ValueStack.Depth-2].d, (uint)ValueStack[ValueStack.Depth-1].d);
                }
        break;
      case 177: // measurement -> BEGIN, MEASUREMENT, measurement_data, END, MEASUREMENT
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-3].measurement;
                }
        break;
      case 178: // measurement_data -> IDENTIFIER, QUOTED_STRING, IDENTIFIER, IDENTIFIER, NUMBER, 
                //                     NUMBER, NUMBER, NUMBER
{
                    CurrentSemanticValue.measurement = new MEASUREMENT(CurrentLocationSpan, ValueStack[ValueStack.Depth-8].s, ValueStack[ValueStack.Depth-7].s, (DataType)EnumToStringOrAbort(typeof(DataType), ValueStack[ValueStack.Depth-6].s), ValueStack[ValueStack.Depth-5].s, (uint)ValueStack[ValueStack.Depth-4].d, ValueStack[ValueStack.Depth-3].d, ValueStack[ValueStack.Depth-2].d, ValueStack[ValueStack.Depth-1].d);
                }
        break;
      case 179: // measurement_data -> measurement_data, annotation
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.annotation.Add(ValueStack[ValueStack.Depth-1].annotation);
                }
        break;
      case 180: // measurement_data -> measurement_data, array_size
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.array_size = ValueStack[ValueStack.Depth-1].array_size;
                }
        break;
      case 181: // measurement_data -> measurement_data, BIT_MASK, NUMBER
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-3].measurement;
                    CurrentSemanticValue.measurement.bit_mask = (UInt64)ValueStack[ValueStack.Depth-1].d;
                }
        break;
      case 182: // measurement_data -> measurement_data, bit_operation
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.bit_operation = ValueStack[ValueStack.Depth-1].bit_operation;
                }
        break;
      case 183: // measurement_data -> measurement_data, byte_order
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.byte_order = ValueStack[ValueStack.Depth-1].byte_order;
                }
        break;
      case 184: // measurement_data -> measurement_data, DISCRETE
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.discrete = new DISCRETE(LocationStack[LocationStack.Depth-1]);
                }
        break;
      case 185: // measurement_data -> measurement_data, DISPLAY_IDENTIFIER, IDENTIFIER
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-3].measurement;
                    CurrentSemanticValue.measurement.display_identifier = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 186: // measurement_data -> measurement_data, ecu_address
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.ecu_address = ValueStack[ValueStack.Depth-1].ecu_address;
                }
        break;
      case 187: // measurement_data -> measurement_data, ecu_address_extension
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.ecu_address_extension = ValueStack[ValueStack.Depth-1].ecu_address_ext;
                }
        break;
      case 188: // measurement_data -> measurement_data, ERROR_MASK, NUMBER
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-3].measurement;
                    CurrentSemanticValue.measurement.error_mask = (UInt64)ValueStack[ValueStack.Depth-1].d;
                }
        break;
      case 189: // measurement_data -> measurement_data, FORMAT, QUOTED_STRING
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-3].measurement;
                    CurrentSemanticValue.measurement.format = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 190: // measurement_data -> measurement_data, function_list
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.function_list = ValueStack[ValueStack.Depth-1].function_list;
                }
        break;
      case 191: // measurement_data -> measurement_data, LAYOUT, IDENTIFIER
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-3].measurement;
                    CurrentSemanticValue.measurement.layout = (MEASUREMENT.LAYOUT)EnumToStringOrAbort(typeof(MEASUREMENT.LAYOUT), ValueStack[ValueStack.Depth-1].s);
                }
        break;
      case 192: // measurement_data -> measurement_data, matrix_dim
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.matrix_dim = ValueStack[ValueStack.Depth-1].matrix_dim;
                }
        break;
      case 193: // measurement_data -> measurement_data, max_refresh
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.max_refresh = ValueStack[ValueStack.Depth-1].max_refresh;
                }
        break;
      case 194: // measurement_data -> measurement_data, PHYS_UNIT, QUOTED_STRING
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-3].measurement;
                    CurrentSemanticValue.measurement.phys_unit = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 195: // measurement_data -> measurement_data, READ_WRITE
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.read_write = new READ_WRITE(LocationStack[LocationStack.Depth-1]);
                }
        break;
      case 196: // measurement_data -> measurement_data, REF_MEMORY_SEGMENT, IDENTIFIER
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-3].measurement;
                    CurrentSemanticValue.measurement.ref_memory_segment = ValueStack[ValueStack.Depth-1].s;
                }
        break;
      case 197: // measurement_data -> measurement_data, symbol_link
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.symbol_link = ValueStack[ValueStack.Depth-1].symbol_link;
                }
        break;
      case 198: // measurement_data -> measurement_data, Virtual
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.Virtual = ValueStack[ValueStack.Depth-1].Virtual;
                }
        break;
      case 199: // measurement_data -> measurement_data, if_data
{
                    CurrentSemanticValue.measurement = ValueStack[ValueStack.Depth-2].measurement;
                    CurrentSemanticValue.measurement.if_data.Add(ValueStack[ValueStack.Depth-1].if_data);
                }
        break;
      case 200: // max_refresh -> MAX_REFRESH, NUMBER, NUMBER
{
                    CurrentSemanticValue.max_refresh = new MAX_REFRESH(CurrentLocationSpan, (UInt64)ValueStack[ValueStack.Depth-2].d, (UInt64)ValueStack[ValueStack.Depth-1].d);
                }
        break;
      case 201: // monotony -> MONOTONY, IDENTIFIER
{
        CurrentSemanticValue.monotony = new MONOTONY(CurrentLocationSpan, (MONOTONY.MONOTONY_type)EnumToStringOrAbort(typeof(MONOTONY.MONOTONY_type), ValueStack[ValueStack.Depth-1].s));
    }
        break;
      case 202: // symbol_link -> SYMBOL_LINK, QUOTED_STRING, NUMBER
{
                    CurrentSemanticValue.symbol_link = new SYMBOL_LINK(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].s, (UInt64)ValueStack[ValueStack.Depth-1].d);
                }
        break;
      case 203: // function -> BEGIN, FUNCTION, function_data, END, FUNCTION
{
        CurrentSemanticValue.function = ValueStack[ValueStack.Depth-3].function;
    }
        break;
      case 204: // function_data -> IDENTIFIER, QUOTED_STRING
{
        CurrentSemanticValue.function = new FUNCTION(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].s, ValueStack[ValueStack.Depth-1].s);
    }
        break;
      case 205: // function_data -> function_data, annotation
{
        CurrentSemanticValue.function = ValueStack[ValueStack.Depth-2].function;
        CurrentSemanticValue.function.annotation.Add(ValueStack[ValueStack.Depth-1].annotation);
    }
        break;
      case 206: // function_data -> function_data, FUNCTION_VERSION, QUOTED_STRING
{
        CurrentSemanticValue.function = ValueStack[ValueStack.Depth-3].function;
        CurrentSemanticValue.function.function_version = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 207: // function_data -> function_data, BEGIN, DEF_CHARACTERISTIC, IDENTIFIER_list, END, 
                //                  DEF_CHARACTERISTIC
{
        CurrentSemanticValue.function = ValueStack[ValueStack.Depth-6].function;
        CurrentSemanticValue.function.def_characteristic = new DEF_CHARACTERISTIC(CurrentLocationSpan);
        CurrentSemanticValue.function.def_characteristic.def_characteristics = ValueStack[ValueStack.Depth-3].IDENTIFIER_list;
    }
        break;
      case 208: // function_data -> function_data, if_data
{
        CurrentSemanticValue.function = ValueStack[ValueStack.Depth-2].function;
        CurrentSemanticValue.function.if_data.Add(ValueStack[ValueStack.Depth-1].if_data);
    }
        break;
      case 209: // function_data -> function_data, BEGIN, IN_MEASUREMENT, IDENTIFIER_list, END, 
                //                  IN_MEASUREMENT
{
        CurrentSemanticValue.function = ValueStack[ValueStack.Depth-6].function;
        CurrentSemanticValue.function.in_measurement = new IN_MEASUREMENT(CurrentLocationSpan);
        CurrentSemanticValue.function.in_measurement.measurements = ValueStack[ValueStack.Depth-3].IDENTIFIER_list;
    }
        break;
      case 210: // function_data -> function_data, BEGIN, LOC_MEASUREMENT, IDENTIFIER_list, END, 
                //                  LOC_MEASUREMENT
{
        CurrentSemanticValue.function = ValueStack[ValueStack.Depth-6].function;
        CurrentSemanticValue.function.loc_measurement = new LOC_MEASUREMENT(CurrentLocationSpan);
        CurrentSemanticValue.function.loc_measurement.measurements = ValueStack[ValueStack.Depth-3].IDENTIFIER_list;
    }
        break;
      case 211: // function_data -> function_data, BEGIN, OUT_MEASUREMENT, IDENTIFIER_list, END, 
                //                  OUT_MEASUREMENT
{
        CurrentSemanticValue.function = ValueStack[ValueStack.Depth-6].function;
        CurrentSemanticValue.function.out_measurement = new OUT_MEASUREMENT(CurrentLocationSpan);
        CurrentSemanticValue.function.out_measurement.measurements = ValueStack[ValueStack.Depth-3].IDENTIFIER_list;
    }
        break;
      case 212: // function_data -> function_data, ref_characteristic
{
        CurrentSemanticValue.function = ValueStack[ValueStack.Depth-2].function;
        CurrentSemanticValue.function.ref_characteristic = ValueStack[ValueStack.Depth-1].ref_characteristic;
    }
        break;
      case 213: // function_data -> function_data, BEGIN, SUB_FUNCTION, IDENTIFIER_list, END, 
                //                  SUB_FUNCTION
{
        CurrentSemanticValue.function = ValueStack[ValueStack.Depth-6].function;
        CurrentSemanticValue.function.sub_function = new SUB_FUNCTION(CurrentLocationSpan);
        CurrentSemanticValue.function.sub_function.sub_functions = ValueStack[ValueStack.Depth-3].IDENTIFIER_list;
    }
        break;
      case 214: // function_list -> BEGIN, FUNCTION_LIST, function_list_data, END, FUNCTION_LIST
{
                    CurrentSemanticValue.function_list = ValueStack[ValueStack.Depth-3].function_list;
                }
        break;
      case 215: // function_list_data -> /* empty */
{
                    CurrentSemanticValue.function_list = new FUNCTION_LIST(CurrentLocationSpan);
                }
        break;
      case 216: // function_list_data -> function_list_data, IDENTIFIER
{
                    CurrentSemanticValue.function_list = ValueStack[ValueStack.Depth-2].function_list;
                    CurrentSemanticValue.function_list.functions.Add(ValueStack[ValueStack.Depth-1].s);
                }
        break;
      case 217: // Virtual -> BEGIN, VIRTUAL, Virtual_data, END, VIRTUAL
{
                    CurrentSemanticValue.Virtual = ValueStack[ValueStack.Depth-3].Virtual;
                }
        break;
      case 218: // Virtual_data -> /* empty */
{
                    CurrentSemanticValue.Virtual = new VIRTUAL(CurrentLocationSpan);
                }
        break;
      case 219: // Virtual_data -> Virtual_data, IDENTIFIER
{
                    CurrentSemanticValue.Virtual = ValueStack[ValueStack.Depth-2].Virtual;
                    CurrentSemanticValue.Virtual.MeasuringChannel.Add(ValueStack[ValueStack.Depth-1].s);
                }
        break;
      case 220: // memory_segment -> BEGIN, MEMORY_SEGMENT, memory_segment_data, END, 
                //                   MEMORY_SEGMENT
{
                    CurrentSemanticValue.memory_segment = ValueStack[ValueStack.Depth-3].memory_segment;
                }
        break;
      case 221: // memory_segment_data -> IDENTIFIER, QUOTED_STRING, IDENTIFIER, IDENTIFIER, 
                //                        IDENTIFIER, NUMBER, NUMBER, NUMBER, NUMBER, NUMBER, 
                //                        NUMBER, NUMBER
{
                    MEMORY_SEGMENT.PrgType PrgType = (MEMORY_SEGMENT.PrgType)EnumToStringOrAbort(typeof(MEMORY_SEGMENT.PrgType), ValueStack[ValueStack.Depth-10].s);
                    MEMORY_SEGMENT.MemoryType MemoryType = (MEMORY_SEGMENT.MemoryType)EnumToStringOrAbort(typeof(MEMORY_SEGMENT.MemoryType), ValueStack[ValueStack.Depth-9].s);
                    MEMORY_SEGMENT.Attribute Attribute = (MEMORY_SEGMENT.Attribute)EnumToStringOrAbort(typeof(MEMORY_SEGMENT.Attribute), ValueStack[ValueStack.Depth-8].s);
                    CurrentSemanticValue.memory_segment = new MEMORY_SEGMENT(CurrentLocationSpan, ValueStack[ValueStack.Depth-12].s, ValueStack[ValueStack.Depth-11].s, PrgType, MemoryType, Attribute, (UInt64)ValueStack[ValueStack.Depth-7].d, (UInt64)ValueStack[ValueStack.Depth-6].d, (Int64)ValueStack[ValueStack.Depth-5].d, (Int64)ValueStack[ValueStack.Depth-4].d, (Int64)ValueStack[ValueStack.Depth-3].d, (Int64)ValueStack[ValueStack.Depth-2].d, (Int64)ValueStack[ValueStack.Depth-1].d);
                }
        break;
      case 222: // memory_segment_data -> memory_segment_data, if_data
{
                    CurrentSemanticValue.memory_segment = ValueStack[ValueStack.Depth-2].memory_segment;
                    CurrentSemanticValue.memory_segment.if_data.Add(ValueStack[ValueStack.Depth-1].if_data);
                }
        break;
      case 223: // memory_layout -> BEGIN, MEMORY_LAYOUT, memory_layout_data, END, MEMORY_LAYOUT
{
                        CurrentSemanticValue.memory_layout = ValueStack[ValueStack.Depth-3].memory_layout;
                    }
        break;
      case 224: // memory_layout_data -> IDENTIFIER, NUMBER, NUMBER, NUMBER, NUMBER, NUMBER, 
                //                       NUMBER, NUMBER
{
                    MEMORY_LAYOUT.PrgType PrgType = (MEMORY_LAYOUT.PrgType)EnumToStringOrAbort(typeof(MEMORY_LAYOUT.PrgType), ValueStack[ValueStack.Depth-8].s);
                    CurrentSemanticValue.memory_layout = new MEMORY_LAYOUT(CurrentLocationSpan, PrgType, (UInt64)ValueStack[ValueStack.Depth-7].d, (UInt64)ValueStack[ValueStack.Depth-6].d, (Int64)ValueStack[ValueStack.Depth-5].d, (Int64)ValueStack[ValueStack.Depth-4].d, (Int64)ValueStack[ValueStack.Depth-3].d, (Int64)ValueStack[ValueStack.Depth-2].d, (Int64)ValueStack[ValueStack.Depth-1].d);
                }
        break;
      case 225: // memory_layout_data -> memory_layout_data, if_data
{
                    CurrentSemanticValue.memory_layout = ValueStack[ValueStack.Depth-2].memory_layout;
                    CurrentSemanticValue.memory_layout.if_data.Add(ValueStack[ValueStack.Depth-1].if_data);
                }
        break;
      case 226: // deposit -> DEPOSIT, IDENTIFIER
{
                    DEPOSIT.DEPOSIT_type type = (DEPOSIT.DEPOSIT_type)EnumToStringOrAbort(typeof(DEPOSIT.DEPOSIT_type), ValueStack[ValueStack.Depth-1].s);
                    CurrentSemanticValue.deposit = new DEPOSIT(CurrentLocationSpan, type);
                }
        break;
      case 227: // byte_order -> BYTE_ORDER, IDENTIFIER
{
                    BYTE_ORDER.BYTE_ORDER_type order = (BYTE_ORDER.BYTE_ORDER_type)EnumToStringOrAbort(typeof(BYTE_ORDER.BYTE_ORDER_type), ValueStack[ValueStack.Depth-1].s);
                    CurrentSemanticValue.byte_order = new BYTE_ORDER(CurrentLocationSpan, order);
                }
        break;
      case 228: // ecu_address -> ECU_ADDRESS, NUMBER
{
                                CurrentSemanticValue.ecu_address = new ECU_ADDRESS(CurrentLocationSpan, (UInt64)ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 229: // ecu_address_extension -> ECU_ADDRESS_EXTENSION, NUMBER
{
                                CurrentSemanticValue.ecu_address_ext = new ECU_ADDRESS_EXTENSION(CurrentLocationSpan, (UInt64)ValueStack[ValueStack.Depth-1].d);
                            }
        break;
      case 230: // group -> BEGIN, GROUP, group_data, END, GROUP
{
                                CurrentSemanticValue.group = ValueStack[ValueStack.Depth-3].group;
                            }
        break;
      case 231: // group_data -> IDENTIFIER, QUOTED_STRING
{
                                CurrentSemanticValue.group = new GROUP(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].s, ValueStack[ValueStack.Depth-1].s);
                            }
        break;
      case 232: // group_data -> group_data, annotation
{
                                CurrentSemanticValue.group = ValueStack[ValueStack.Depth-2].group;
                                CurrentSemanticValue.group.annotation.Add(ValueStack[ValueStack.Depth-1].annotation);
                            }
        break;
      case 233: // group_data -> group_data, if_data
{
                                CurrentSemanticValue.group = ValueStack[ValueStack.Depth-2].group;
                                CurrentSemanticValue.group.if_data.Add(ValueStack[ValueStack.Depth-1].if_data);
                            }
        break;
      case 234: // group_data -> group_data, function_list
{
                                CurrentSemanticValue.group = ValueStack[ValueStack.Depth-2].group;
                                CurrentSemanticValue.group.function_list = ValueStack[ValueStack.Depth-1].function_list;
                            }
        break;
      case 235: // group_data -> group_data, ref_characteristic
{
                                CurrentSemanticValue.group = ValueStack[ValueStack.Depth-2].group;
                                CurrentSemanticValue.group.ref_characteristic = ValueStack[ValueStack.Depth-1].ref_characteristic;
                            }
        break;
      case 236: // group_data -> group_data, ref_measurement
{
                                CurrentSemanticValue.group = ValueStack[ValueStack.Depth-2].group;
                                CurrentSemanticValue.group.ref_measurement = ValueStack[ValueStack.Depth-1].ref_measurement;
                            }
        break;
      case 237: // group_data -> group_data, ROOT
{
                                CurrentSemanticValue.group = ValueStack[ValueStack.Depth-2].group;
                                CurrentSemanticValue.group.root = new ROOT(LocationStack[LocationStack.Depth-1]);
                            }
        break;
      case 238: // group_data -> group_data, sub_group
{
                                CurrentSemanticValue.group = ValueStack[ValueStack.Depth-2].group;
                                CurrentSemanticValue.group.sub_group = ValueStack[ValueStack.Depth-1].sub_group;
                            }
        break;
      case 239: // ref_characteristic -> BEGIN, REF_CHARACTERISTIC, ref_characteristic_data, END, 
                //                       REF_CHARACTERISTIC
{
                                CurrentSemanticValue.ref_characteristic = ValueStack[ValueStack.Depth-3].ref_characteristic;
                            }
        break;
      case 240: // ref_characteristic_data -> /* empty */
{
                                CurrentSemanticValue.ref_characteristic = new REF_CHARACTERISTIC(CurrentLocationSpan);
                            }
        break;
      case 241: // ref_characteristic_data -> ref_characteristic_data, IDENTIFIER
{
                                CurrentSemanticValue.ref_characteristic = ValueStack[ValueStack.Depth-2].ref_characteristic;
                                CurrentSemanticValue.ref_characteristic.reference.Add(ValueStack[ValueStack.Depth-1].s);
                            }
        break;
      case 242: // ref_measurement -> BEGIN, REF_MEASUREMENT, ref_measurement_data, END, 
                //                    REF_MEASUREMENT
{
                                CurrentSemanticValue.ref_measurement = ValueStack[ValueStack.Depth-3].ref_measurement;
                            }
        break;
      case 243: // ref_measurement_data -> /* empty */
{
                                CurrentSemanticValue.ref_measurement = new REF_MEASUREMENT(CurrentLocationSpan);
                            }
        break;
      case 244: // ref_measurement_data -> ref_measurement_data, IDENTIFIER
{
                                CurrentSemanticValue.ref_measurement = ValueStack[ValueStack.Depth-2].ref_measurement;
                                CurrentSemanticValue.ref_measurement.reference.Add(ValueStack[ValueStack.Depth-1].s);
                            }
        break;
      case 245: // record_layout -> BEGIN, RECORD_LAYOUT, record_layout_data, END, RECORD_LAYOUT
{
         CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-3].record_layout;
    }
        break;
      case 246: // record_layout_data -> IDENTIFIER
{
        CurrentSemanticValue.record_layout = new RECORD_LAYOUT(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].s);
    }
        break;
      case 247: // record_layout_data -> record_layout_data, alignment
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-2].record_layout;
        try
        {
            CurrentSemanticValue.record_layout.alignments.Add(ValueStack[ValueStack.Depth-1].alignment.name, ValueStack[ValueStack.Depth-1].alignment);
        }
        catch (ArgumentException)
        {
            Scanner.yyerror(String.Format("Warning: Duplicate '{0}' found, ignoring", ValueStack[ValueStack.Depth-1].alignment.name));
        }
    }
        break;
      case 248: // record_layout_data -> record_layout_data, AXIS_PTS_XYZ45, NUMBER, IDENTIFIER, 
                //                       IDENTIFIER, IDENTIFIER
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-6].record_layout;
        try
        {
            CurrentSemanticValue.record_layout.axis_pts_xyz45.Add(ValueStack[ValueStack.Depth-5].s, new AXIS_PTS_XYZ45(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-5].s, Position: (UInt64)ValueStack[ValueStack.Depth-4].d, dataType: (DataType)EnumToStringOrAbort(typeof(DataType), ValueStack[ValueStack.Depth-3].s), indexIncr: (IndexOrder)EnumToStringOrAbort(typeof(IndexOrder), ValueStack[ValueStack.Depth-2].s), addrType: (AddrType)EnumToStringOrAbort(typeof(AddrType), ValueStack[ValueStack.Depth-1].s)));
        }
        catch (ArgumentException)
        {
            Scanner.yyerror(String.Format("Warning: Duplicate '{0}' found, ignoring", ValueStack[ValueStack.Depth-5].s));
        }
    }
        break;
      case 249: // record_layout_data -> record_layout_data, AXIS_RESCALE_XYZ45, NUMBER, 
                //                       IDENTIFIER, NUMBER, IDENTIFIER, IDENTIFIER
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-7].record_layout;
        try
        {
            CurrentSemanticValue.record_layout.axis_rescale_xyz45.Add(ValueStack[ValueStack.Depth-6].s, new AXIS_RESCALE_XYZ45(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-6].s, Position: (UInt64)ValueStack[ValueStack.Depth-5].d, dataType: (DataType)EnumToStringOrAbort(typeof(DataType), ValueStack[ValueStack.Depth-4].s), MaxNoOfRescalePairs: (UInt64)ValueStack[ValueStack.Depth-3].d, indexIncr: (IndexOrder)EnumToStringOrAbort(typeof(IndexOrder), ValueStack[ValueStack.Depth-2].s), addrType: (AddrType)EnumToStringOrAbort(typeof(AddrType), ValueStack[ValueStack.Depth-1].s)));
        }
        catch (ArgumentException)
        {
            Scanner.yyerror(String.Format("Warning: Duplicate '{0}' found, ignoring", ValueStack[ValueStack.Depth-6].s));
        }
    }
        break;
      case 250: // record_layout_data -> record_layout_data, DIST_OP_XYZ45, NUMBER, IDENTIFIER
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-4].record_layout;
        try
        {
            CurrentSemanticValue.record_layout.dist_op_xyz45.Add(ValueStack[ValueStack.Depth-3].s, new DIST_OP_XYZ45(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-3].s, Position: (UInt64)ValueStack[ValueStack.Depth-2].d, dataType: (DataType)EnumToStringOrAbort(typeof(DataType), ValueStack[ValueStack.Depth-1].s)));
        }
        catch (ArgumentException)
        {
            Scanner.yyerror(String.Format("Warning: Duplicate '{0}' found, ignoring", ValueStack[ValueStack.Depth-3].s));
        }
    }
        break;
      case 251: // record_layout_data -> record_layout_data, FIX_NO_AXIS_PTS_XYZ45, NUMBER
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-3].record_layout;
        try
        {
            CurrentSemanticValue.record_layout.fix_no_axis_pts_xyz45.Add(ValueStack[ValueStack.Depth-2].s, new FIX_NO_AXIS_PTS_XYZ45(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-2].s, NumberOfAxisPoints: (UInt64)ValueStack[ValueStack.Depth-1].d));
        }
        catch (ArgumentException)
        {
            Scanner.yyerror(String.Format("Warning: Duplicate '{0}' found, ignoring", ValueStack[ValueStack.Depth-2].s));
        }
    }
        break;
      case 252: // record_layout_data -> record_layout_data, FNC_VALUES, NUMBER, IDENTIFIER, 
                //                       IDENTIFIER, IDENTIFIER
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-6].record_layout;
        CurrentSemanticValue.record_layout.fnc_values = new FNC_VALUES(location: CurrentLocationSpan, Position: (UInt64)ValueStack[ValueStack.Depth-4].d, dataType: (DataType)EnumToStringOrAbort(typeof(DataType), ValueStack[ValueStack.Depth-3].s), indexMode: (FNC_VALUES.IndexMode)EnumToStringOrAbort(typeof(FNC_VALUES.IndexMode), ValueStack[ValueStack.Depth-2].s), addrType: (AddrType)EnumToStringOrAbort(typeof(AddrType), ValueStack[ValueStack.Depth-1].s));
    }
        break;
      case 253: // record_layout_data -> record_layout_data, IDENTIFICATION, NUMBER, IDENTIFIER
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-4].record_layout;
        CurrentSemanticValue.record_layout.identification = new IDENTIFICATION(location: CurrentLocationSpan, Position: (UInt64)ValueStack[ValueStack.Depth-2].d, dataType: (DataType)EnumToStringOrAbort(typeof(DataType), ValueStack[ValueStack.Depth-1].s));
    }
        break;
      case 254: // record_layout_data -> record_layout_data, NO_AXIS_PTS_XYZ45, NUMBER, IDENTIFIER
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-4].record_layout;
        try
        {
            CurrentSemanticValue.record_layout.no_axis_pts_xyz45.Add(ValueStack[ValueStack.Depth-3].s, new NO_AXIS_PTS_XYZ45(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-3].s, Position: (UInt64)ValueStack[ValueStack.Depth-2].d, dataType: (DataType)EnumToStringOrAbort(typeof(DataType), ValueStack[ValueStack.Depth-1].s)));
        }
        catch (ArgumentException)
        {
            Scanner.yyerror(String.Format("Warning: Duplicate '{0}' found, ignoring", ValueStack[ValueStack.Depth-3].s));
        }
    }
        break;
      case 255: // record_layout_data -> record_layout_data, NO_RESCALE_XYZ45, NUMBER, IDENTIFIER
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-4].record_layout;
        try
        {
            CurrentSemanticValue.record_layout.no_rescale_xyz45.Add(ValueStack[ValueStack.Depth-3].s, new NO_RESCALE_XYZ45(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-3].s, Position: (UInt64)ValueStack[ValueStack.Depth-2].d, dataType: (DataType)EnumToStringOrAbort(typeof(DataType), ValueStack[ValueStack.Depth-1].s)));
        }
        catch (ArgumentException)
        {
            Scanner.yyerror(String.Format("Warning: Duplicate '{0}' found, ignoring", ValueStack[ValueStack.Depth-3].s));
        }
    }
        break;
      case 256: // record_layout_data -> record_layout_data, OFFSET_XYZ45, NUMBER, IDENTIFIER
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-4].record_layout;
        try
        {
            CurrentSemanticValue.record_layout.offset_xyz45.Add(ValueStack[ValueStack.Depth-3].s, new OFFSET_XYZ45(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-3].s, Position: (UInt64)ValueStack[ValueStack.Depth-2].d, dataType: (DataType)EnumToStringOrAbort(typeof(DataType), ValueStack[ValueStack.Depth-1].s)));
        }
        catch (ArgumentException)
        {
            Scanner.yyerror(String.Format("Warning: Duplicate '{0}' found, ignoring", ValueStack[ValueStack.Depth-3].s));
        }
    }
        break;
      case 257: // record_layout_data -> record_layout_data, RESERVED, NUMBER, IDENTIFIER
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-4].record_layout;
        CurrentSemanticValue.record_layout.reserved = new RESERVED(location: CurrentLocationSpan, Position: (UInt64)ValueStack[ValueStack.Depth-2].d, dataSize: (DataSize)EnumToStringOrAbort(typeof(DataSize), ValueStack[ValueStack.Depth-1].s));
    }
        break;
      case 258: // record_layout_data -> record_layout_data, RIP_ADDR_WXYZ45, NUMBER, IDENTIFIER
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-4].record_layout;
        try
        {
            CurrentSemanticValue.record_layout.rip_addr_wxyz45.Add(ValueStack[ValueStack.Depth-3].s, new RIP_ADDR_WXYZ45(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-3].s, Position: (UInt64)ValueStack[ValueStack.Depth-2].d, dataType: (DataType)EnumToStringOrAbort(typeof(DataType), ValueStack[ValueStack.Depth-1].s)));
        }
        catch (ArgumentException)
        {
            Scanner.yyerror(String.Format("Warning: Duplicate '{0}' found, ignoring", ValueStack[ValueStack.Depth-3].s));
        }
    }
        break;
      case 259: // record_layout_data -> record_layout_data, SHIFT_OP_XYZ45, NUMBER, IDENTIFIER
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-4].record_layout;
        try
        {
            CurrentSemanticValue.record_layout.shift_op_xyz45.Add(ValueStack[ValueStack.Depth-3].s, new SHIFT_OP_XYZ45(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-3].s, Position: (UInt64)ValueStack[ValueStack.Depth-2].d, dataType: (DataType)EnumToStringOrAbort(typeof(DataType), ValueStack[ValueStack.Depth-1].s)));
        }
        catch (ArgumentException)
        {
            Scanner.yyerror(String.Format("Warning: Duplicate '{0}' found, ignoring", ValueStack[ValueStack.Depth-3].s));
        }
    }
        break;
      case 260: // record_layout_data -> record_layout_data, SRC_ADDR_XYZ45, NUMBER, IDENTIFIER
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-4].record_layout;
        try
        {
            CurrentSemanticValue.record_layout.src_addr_xyz45.Add(ValueStack[ValueStack.Depth-3].s, new SRC_ADDR_XYZ45(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-3].s, Position: (UInt64)ValueStack[ValueStack.Depth-2].d, dataType: (DataType)EnumToStringOrAbort(typeof(DataType), ValueStack[ValueStack.Depth-1].s)));
        }
        catch (ArgumentException)
        {
            Scanner.yyerror(String.Format("Warning: Duplicate '{0}' found, ignoring", ValueStack[ValueStack.Depth-3].s));
        }
    }
        break;
      case 261: // record_layout_data -> record_layout_data, STATIC_RECORD_LAYOUT
{
        CurrentSemanticValue.record_layout = ValueStack[ValueStack.Depth-2].record_layout;
        CurrentSemanticValue.record_layout.static_record_layout = new STATIC_RECORD_LAYOUT(CurrentLocationSpan);
    }
        break;
      case 262: // sub_group -> BEGIN, SUB_GROUP, sub_group_data, END, SUB_GROUP
{
                                CurrentSemanticValue.sub_group = ValueStack[ValueStack.Depth-3].sub_group;
                            }
        break;
      case 263: // sub_group_data -> /* empty */
{
                                CurrentSemanticValue.sub_group = new SUB_GROUP(CurrentLocationSpan);
                            }
        break;
      case 264: // sub_group_data -> sub_group_data, IDENTIFIER
{
                                CurrentSemanticValue.sub_group = ValueStack[ValueStack.Depth-2].sub_group;
                                CurrentSemanticValue.sub_group.groups.Add(ValueStack[ValueStack.Depth-1].s);
                            }
        break;
      case 265: // unit -> BEGIN, UNIT, unit_data, END, UNIT
{
        CurrentSemanticValue.unit = ValueStack[ValueStack.Depth-3].unit;
    }
        break;
      case 266: // unit_data -> IDENTIFIER, QUOTED_STRING, QUOTED_STRING, IDENTIFIER
{
        CurrentSemanticValue.unit = new UNIT(location: CurrentLocationSpan, Name: ValueStack[ValueStack.Depth-4].s, LongIdentifier: ValueStack[ValueStack.Depth-3].s, Display: ValueStack[ValueStack.Depth-2].s, type: (UNIT.Type)EnumToStringOrAbort(typeof(UNIT.Type), ValueStack[ValueStack.Depth-1].s));
    }
        break;
      case 267: // unit_data -> unit_data, REF_UNIT, IDENTIFIER
{
        CurrentSemanticValue.unit = ValueStack[ValueStack.Depth-3].unit;
        CurrentSemanticValue.unit.ref_unit = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 268: // unit_data -> unit_data, SI_EXPONENTS, NUMBER, NUMBER, NUMBER, NUMBER, NUMBER, 
                //              NUMBER, NUMBER
{
        CurrentSemanticValue.unit = ValueStack[ValueStack.Depth-9].unit;
        CurrentSemanticValue.unit.si_exponents = new SI_EXPONENTS(CurrentLocationSpan, (Int64)ValueStack[ValueStack.Depth-7].d, (Int64)ValueStack[ValueStack.Depth-6].d, (Int64)ValueStack[ValueStack.Depth-5].d, (Int64)ValueStack[ValueStack.Depth-4].d, (Int64)ValueStack[ValueStack.Depth-3].d, (Int64)ValueStack[ValueStack.Depth-2].d, (Int64)ValueStack[ValueStack.Depth-1].d);
    }
        break;
      case 269: // unit_data -> unit_data, UNIT_CONVERSION, NUMBER, NUMBER
{
        CurrentSemanticValue.unit = ValueStack[ValueStack.Depth-4].unit;
        CurrentSemanticValue.unit.unit_conversion = new UNIT_CONVERSION(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].d, ValueStack[ValueStack.Depth-1].d);
    }
        break;
      case 270: // user_rights -> BEGIN, USER_RIGHTS, user_rights_data, END, USER_RIGHTS
{
        CurrentSemanticValue.user_rights = ValueStack[ValueStack.Depth-3].user_rights;
    }
        break;
      case 271: // user_rights_data -> IDENTIFIER
{
        CurrentSemanticValue.user_rights = new USER_RIGHTS(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].s);
    }
        break;
      case 272: // user_rights_data -> user_rights_data, BEGIN, REF_GROUP, IDENTIFIER_list, END, 
                //                     REF_GROUP
{
        var ref_group = new REF_GROUP(CurrentLocationSpan);
        ref_group.reference = ValueStack[ValueStack.Depth-3].IDENTIFIER_list;
        CurrentSemanticValue.user_rights = ValueStack[ValueStack.Depth-6].user_rights;
        CurrentSemanticValue.user_rights.ref_group.Add(ref_group);
    }
        break;
      case 273: // user_rights_data -> user_rights_data, READ_ONLY
{
        CurrentSemanticValue.user_rights = ValueStack[ValueStack.Depth-2].user_rights;
        CurrentSemanticValue.user_rights.read_only = new READ_ONLY(CurrentLocationSpan);
    }
        break;
      case 274: // frame -> BEGIN, FRAME, frame_data, END, FRAME
{
        CurrentSemanticValue.frame = ValueStack[ValueStack.Depth-3].frame;
    }
        break;
      case 275: // frame_data -> IDENTIFIER, QUOTED_STRING, NUMBER, NUMBER
{
        CurrentSemanticValue.frame = new FRAME(CurrentLocationSpan, ValueStack[ValueStack.Depth-4].s, ValueStack[ValueStack.Depth-3].s, (UInt64)ValueStack[ValueStack.Depth-2].d, (UInt64)ValueStack[ValueStack.Depth-1].d);
    }
        break;
      case 276: // frame_data -> frame_data, FRAME_MEASUREMENT, IDENTIFIER_list
{
        CurrentSemanticValue.frame = ValueStack[ValueStack.Depth-3].frame;
        CurrentSemanticValue.frame.frame_measurement = ValueStack[ValueStack.Depth-1].IDENTIFIER_list;
    }
        break;
      case 277: // frame_data -> frame_data, if_data
{
        CurrentSemanticValue.frame = ValueStack[ValueStack.Depth-2].frame;
        CurrentSemanticValue.frame.if_data.Add(ValueStack[ValueStack.Depth-1].if_data);
    }
        break;
      case 278: // variant_coding -> BEGIN, VARIANT_CODING, variant_coding_data, END, 
                //                   VARIANT_CODING
{
        CurrentSemanticValue.variant_coding = ValueStack[ValueStack.Depth-3].variant_coding;
    }
        break;
      case 279: // variant_coding_data -> /* empty */
{
        CurrentSemanticValue.variant_coding = new VARIANT_CODING(CurrentLocationSpan);
    }
        break;
      case 280: // variant_coding_data -> variant_coding_data, BEGIN, VAR_CHARACTERISTIC, 
                //                        var_characteristic, END, VAR_CHARACTERISTIC
{
        CurrentSemanticValue.variant_coding = ValueStack[ValueStack.Depth-6].variant_coding;
        CurrentSemanticValue.variant_coding.var_characteristic.Add(ValueStack[ValueStack.Depth-3].var_characteristic);
    }
        break;
      case 281: // variant_coding_data -> variant_coding_data, BEGIN, VAR_CRITERION, var_criterion, 
                //                        END, VAR_CRITERION
{
        CurrentSemanticValue.variant_coding = ValueStack[ValueStack.Depth-6].variant_coding;
        CurrentSemanticValue.variant_coding.var_criterion.Add(ValueStack[ValueStack.Depth-3].var_criterion);
    }
        break;
      case 282: // variant_coding_data -> variant_coding_data, BEGIN, VAR_FORBIDDEN_COMB, 
                //                        var_forbidden_comb, END, VAR_FORBIDDEN_COMB
{
        CurrentSemanticValue.variant_coding = ValueStack[ValueStack.Depth-6].variant_coding;
        CurrentSemanticValue.variant_coding.forbidden_combinations.Add(ValueStack[ValueStack.Depth-3].var_forbidden_comb);
    }
        break;
      case 283: // variant_coding_data -> variant_coding_data, VAR_SEPERATOR, QUOTED_STRING
{
        CurrentSemanticValue.variant_coding = ValueStack[ValueStack.Depth-3].variant_coding;
        CurrentSemanticValue.variant_coding.var_seperator = ValueStack[ValueStack.Depth-1].s;
    }
        break;
      case 284: // variant_coding_data -> variant_coding_data, VAR_NAMING, IDENTIFIER
{
        CurrentSemanticValue.variant_coding = ValueStack[ValueStack.Depth-3].variant_coding;
        CurrentSemanticValue.variant_coding.var_naming = (VARIANT_CODING.VAR_NAMING)EnumToStringOrAbort(typeof(VARIANT_CODING.VAR_NAMING), ValueStack[ValueStack.Depth-1].s);
    }
        break;
      case 285: // var_forbidden_comb -> /* empty */
{
        CurrentSemanticValue.var_forbidden_comb = new VAR_FORBIDDEN_COMB(CurrentLocationSpan);
    }
        break;
      case 286: // var_forbidden_comb -> var_forbidden_comb, IDENTIFIER, IDENTIFIER
{
        CurrentSemanticValue.var_forbidden_comb = ValueStack[ValueStack.Depth-3].var_forbidden_comb;
        CurrentSemanticValue.var_forbidden_comb.combinations.Add(new VAR_FORBIDDEN_COMB.Combo(ValueStack[ValueStack.Depth-2].s, ValueStack[ValueStack.Depth-1].s));
    }
        break;
      case 287: // var_criterion -> IDENTIFIER, QUOTED_STRING
{
        CurrentSemanticValue.var_criterion = new VAR_CRITERION(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].s, ValueStack[ValueStack.Depth-1].s);
    }
        break;
      case 288: // var_criterion -> var_criterion, IDENTIFIER
{
        CurrentSemanticValue.var_criterion = ValueStack[ValueStack.Depth-2].var_criterion;
        CurrentSemanticValue.var_criterion.Idents.Add(ValueStack[ValueStack.Depth-1].s);
    }
        break;
      case 289: // var_criterion -> var_criterion, VAR_MEASUREMENT, IDENTIFIER
{
        CurrentSemanticValue.var_criterion = ValueStack[ValueStack.Depth-3].var_criterion;
        CurrentSemanticValue.var_criterion.var_measurement = new VAR_MEASUREMENT(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].s);
    }
        break;
      case 290: // var_criterion -> var_criterion, VAR_SELECTION_CHARACTERISTIC, IDENTIFIER
{
        CurrentSemanticValue.var_criterion = ValueStack[ValueStack.Depth-3].var_criterion;
        CurrentSemanticValue.var_criterion.var_selection_characteristic = new VAR_SELECTION_CHARACTERISTIC(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].s);
    }
        break;
      case 291: // var_characteristic -> IDENTIFIER
{
        CurrentSemanticValue.var_characteristic = new VAR_CHARACTERISTIC(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].s);
    }
        break;
      case 292: // var_characteristic -> var_characteristic, IDENTIFIER
{
        CurrentSemanticValue.var_characteristic = ValueStack[ValueStack.Depth-2].var_characteristic;
        CurrentSemanticValue.var_characteristic.CriterionNames.Add(ValueStack[ValueStack.Depth-1].s);
    }
        break;
      case 293: // var_characteristic -> var_characteristic, BEGIN, VAR_ADDRESS, var_address, END, 
                //                       VAR_ADDRESS
{
        CurrentSemanticValue.var_characteristic = ValueStack[ValueStack.Depth-6].var_characteristic;
        CurrentSemanticValue.var_characteristic.var_address = ValueStack[ValueStack.Depth-3].var_address;
    }
        break;
      case 294: // var_address -> /* empty */
{
        CurrentSemanticValue.var_address = new VAR_ADDRESS(CurrentLocationSpan);
    }
        break;
      case 295: // var_address -> var_address, NUMBER
{
        CurrentSemanticValue.var_address = ValueStack[ValueStack.Depth-2].var_address;
        CurrentSemanticValue.var_address.Addresses.Add((UInt64)ValueStack[ValueStack.Depth-1].d);
    }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


private object EnumToStringOrAbort(Type type, string strIn)
{
    try
    {
       return Enum.Parse(type, strIn);
    }
    catch (ArgumentException e)
    {
        StringBuilder values = new StringBuilder();
        string[] myArray = Enum.GetNames(type);
        foreach(var item in myArray)
        {
            if (values.Length > 0)
            {
                values.Append(", ");
            }
            values.Append(item);
        }
        Scanner.yyerror(String.Format("Syntax error: Unknown '{0}' enum value '{1}' expecting one of '{2}'", type.ToString(), strIn, values.ToString()));
        YYAbort();
        throw e;
    }
}
}
}
